{"ast":null,"code":"import { DEBUG_BUILD } from '../debug-build.js';\nimport { addGlobalErrorInstrumentationHandler } from '../utils-hoist/instrument/globalError.js';\nimport { addGlobalUnhandledRejectionInstrumentationHandler } from '../utils-hoist/instrument/globalUnhandledRejection.js';\nimport { logger } from '../utils-hoist/logger.js';\nimport { getActiveSpan, getRootSpan } from '../utils/spanUtils.js';\nimport { SPAN_STATUS_ERROR } from './spanstatus.js';\nlet errorsInstrumented = false;\n\n/**\n * Ensure that global errors automatically set the active span status.\n */\nfunction registerSpanErrorInstrumentation() {\n  if (errorsInstrumented) {\n    return;\n  }\n  errorsInstrumented = true;\n  addGlobalErrorInstrumentationHandler(errorCallback);\n  addGlobalUnhandledRejectionInstrumentationHandler(errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active root span as failed\n */\nfunction errorCallback() {\n  const activeSpan = getActiveSpan();\n  const rootSpan = activeSpan && getRootSpan(activeSpan);\n  if (rootSpan) {\n    const message = 'internal_error';\n    DEBUG_BUILD && logger.log(`[Tracing] Root span: ${message} -> Global error occurred`);\n    rootSpan.setStatus({\n      code: SPAN_STATUS_ERROR,\n      message\n    });\n  }\n}\n\n// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n// node.js default exit behaviour\nerrorCallback.tag = 'sentry_tracingErrorCallback';\nexport { registerSpanErrorInstrumentation };","map":{"version":3,"names":["errorsInstrumented","registerSpanErrorInstrumentation","addGlobalErrorInstrumentationHandler","errorCallback","addGlobalUnhandledRejectionInstrumentationHandler","activeSpan","getActiveSpan","rootSpan","getRootSpan","message","DEBUG_BUILD","logger","log","setStatus","code","SPAN_STATUS_ERROR","tag"],"sources":["C:\\Users\\chitt\\OneDrive\\Documents\\Projects\\fresh-bulk\\frontend\\node_modules\\@sentry\\core\\src\\tracing\\errors.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build';\nimport { addGlobalErrorInstrumentationHandler } from '../utils-hoist/instrument/globalError';\nimport { addGlobalUnhandledRejectionInstrumentationHandler } from '../utils-hoist/instrument/globalUnhandledRejection';\nimport { logger } from '../utils-hoist/logger';\nimport { getActiveSpan, getRootSpan } from '../utils/spanUtils';\nimport { SPAN_STATUS_ERROR } from './spanstatus';\n\nlet errorsInstrumented = false;\n\n/**  Only exposed for testing */\nexport function _resetErrorsInstrumented(): void {\n  errorsInstrumented = false;\n}\n\n/**\n * Ensure that global errors automatically set the active span status.\n */\nexport function registerSpanErrorInstrumentation(): void {\n  if (errorsInstrumented) {\n    return;\n  }\n\n  errorsInstrumented = true;\n  addGlobalErrorInstrumentationHandler(errorCallback);\n  addGlobalUnhandledRejectionInstrumentationHandler(errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active root span as failed\n */\nfunction errorCallback(): void {\n  const activeSpan = getActiveSpan();\n  const rootSpan = activeSpan && getRootSpan(activeSpan);\n  if (rootSpan) {\n    const message = 'internal_error';\n    DEBUG_BUILD && logger.log(`[Tracing] Root span: ${message} -> Global error occurred`);\n    rootSpan.setStatus({ code: SPAN_STATUS_ERROR, message });\n  }\n}\n\n// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n// node.js default exit behaviour\nerrorCallback.tag = 'sentry_tracingErrorCallback';\n"],"mappings":";;;;;;AAOA,IAAIA,kBAAA,GAAqB,KAAK;;AAO9B;AACA;AACA;AACO,SAASC,gCAAgCA,CAAA,EAAS;EACvD,IAAID,kBAAkB,EAAE;IACtB;EACJ;EAEEA,kBAAA,GAAqB,IAAI;EACzBE,oCAAoC,CAACC,aAAa,CAAC;EACnDC,iDAAiD,CAACD,aAAa,CAAC;AAClE;;AAEA;AACA;AACA;AACA,SAASA,aAAaA,CAAA,EAAS;EAC7B,MAAME,UAAA,GAAaC,aAAa,EAAE;EAClC,MAAMC,QAAA,GAAWF,UAAA,IAAcG,WAAW,CAACH,UAAU,CAAC;EACtD,IAAIE,QAAQ,EAAE;IACZ,MAAME,OAAQ,GAAE,gBAAgB;IAChCC,WAAY,IAAGC,MAAM,CAACC,GAAG,CAAC,wBAAwBH,OAAO,2BAA2B,CAAC;IACrFF,QAAQ,CAACM,SAAS,CAAC;MAAEC,IAAI,EAAEC,iBAAiB;MAAEN;IAAQ,CAAC,CAAC;EAC5D;AACA;;AAEA;AACA;AACAN,aAAa,CAACa,GAAI,GAAE,6BAA6B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}