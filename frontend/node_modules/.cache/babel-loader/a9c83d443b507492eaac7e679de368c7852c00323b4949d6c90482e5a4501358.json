{"ast":null,"code":"import { inboundFiltersIntegration, functionToStringIntegration, dedupeIntegration, consoleSandbox, supportsFetch, logger, getIntegrationsToSetup, stackParserFromStackParserOptions, initAndBind, getCurrentScope, lastEventId, getReportDialogEndpoint, getLocationHref } from '@sentry/core';\nimport { BrowserClient } from './client.js';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { WINDOW } from './helpers.js';\nimport { breadcrumbsIntegration } from './integrations/breadcrumbs.js';\nimport { browserApiErrorsIntegration } from './integrations/browserapierrors.js';\nimport { browserSessionIntegration } from './integrations/browsersession.js';\nimport { globalHandlersIntegration } from './integrations/globalhandlers.js';\nimport { httpContextIntegration } from './integrations/httpcontext.js';\nimport { linkedErrorsIntegration } from './integrations/linkederrors.js';\nimport { defaultStackParser } from './stack-parsers.js';\nimport { makeFetchTransport } from './transports/fetch.js';\n\n/** Get the default integrations for the browser SDK. */\nfunction getDefaultIntegrations(_options) {\n  /**\n   * Note: Please make sure this stays in sync with Angular SDK, which re-exports\n   * `getDefaultIntegrations` but with an adjusted set of integrations.\n   */\n  return [\n  // TODO(v10): Replace with `eventFiltersIntegration` once we remove the deprecated `inboundFiltersIntegration`\n  // eslint-disable-next-line deprecation/deprecation\n  inboundFiltersIntegration(), functionToStringIntegration(), browserApiErrorsIntegration(), breadcrumbsIntegration(), globalHandlersIntegration(), linkedErrorsIntegration(), dedupeIntegration(), httpContextIntegration(), browserSessionIntegration()];\n}\n\n/** Exported only for tests. */\nfunction applyDefaultOptions(optionsArg = {}) {\n  const defaultOptions = {\n    defaultIntegrations: getDefaultIntegrations(),\n    release: typeof __SENTRY_RELEASE__ === 'string' // This allows build tooling to find-and-replace __SENTRY_RELEASE__ to inject a release value\n    ? __SENTRY_RELEASE__ : WINDOW.SENTRY_RELEASE?.id,\n    // This supports the variable that sentry-webpack-plugin injects\n    sendClientReports: true\n  };\n  return {\n    ...defaultOptions,\n    ...dropTopLevelUndefinedKeys(optionsArg)\n  };\n}\n\n/**\n * In contrast to the regular `dropUndefinedKeys` method,\n * this one does not deep-drop keys, but only on the top level.\n */\nfunction dropTopLevelUndefinedKeys(obj) {\n  const mutatetedObj = {};\n  for (const k of Object.getOwnPropertyNames(obj)) {\n    const key = k;\n    if (obj[key] !== undefined) {\n      mutatetedObj[key] = obj[key];\n    }\n  }\n  return mutatetedObj;\n}\nfunction shouldShowBrowserExtensionError() {\n  const windowWithMaybeExtension = typeof WINDOW.window !== 'undefined' && WINDOW;\n  if (!windowWithMaybeExtension) {\n    // No need to show the error if we're not in a browser window environment (e.g. service workers)\n    return false;\n  }\n  const extensionKey = windowWithMaybeExtension.chrome ? 'chrome' : 'browser';\n  const extensionObject = windowWithMaybeExtension[extensionKey];\n  const runtimeId = extensionObject?.runtime?.id;\n  const href = getLocationHref() || '';\n  const extensionProtocols = ['chrome-extension:', 'moz-extension:', 'ms-browser-extension:', 'safari-web-extension:'];\n\n  // Running the SDK in a dedicated extension page and calling Sentry.init is fine; no risk of data leakage\n  const isDedicatedExtensionPage = !!runtimeId && WINDOW === WINDOW.top && extensionProtocols.some(protocol => href.startsWith(`${protocol}//`));\n\n  // Running the SDK in NW.js, which appears like a browser extension but isn't, is also fine\n  // see: https://github.com/getsentry/sentry-javascript/issues/12668\n  const isNWjs = typeof windowWithMaybeExtension.nw !== 'undefined';\n  return !!runtimeId && !isDedicatedExtensionPage && !isNWjs;\n}\n\n/**\n * A magic string that build tooling can leverage in order to inject a release value into the SDK.\n */\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nfunction init(browserOptions = {}) {\n  const options = applyDefaultOptions(browserOptions);\n  if (!options.skipBrowserExtensionCheck && shouldShowBrowserExtensionError()) {\n    if (DEBUG_BUILD) {\n      consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.error('[Sentry] You cannot run Sentry this way in a browser extension, check: https://docs.sentry.io/platforms/javascript/best-practices/browser-extensions/');\n      });\n    }\n    return;\n  }\n  if (DEBUG_BUILD && !supportsFetch()) {\n    logger.warn('No Fetch API detected. The Sentry SDK requires a Fetch API compatible environment to send events. Please add a Fetch API polyfill.');\n  }\n  const clientOptions = {\n    ...options,\n    stackParser: stackParserFromStackParserOptions(options.stackParser || defaultStackParser),\n    integrations: getIntegrationsToSetup(options),\n    transport: options.transport || makeFetchTransport\n  };\n  return initAndBind(BrowserClient, clientOptions);\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nfunction showReportDialog(options = {}) {\n  // doesn't work without a document (React Native)\n  if (!WINDOW.document) {\n    DEBUG_BUILD && logger.error('Global document not defined in showReportDialog call');\n    return;\n  }\n  const scope = getCurrentScope();\n  const client = scope.getClient();\n  const dsn = client?.getDsn();\n  if (!dsn) {\n    DEBUG_BUILD && logger.error('DSN not configured for showReportDialog call');\n    return;\n  }\n  if (scope) {\n    options.user = {\n      ...scope.getUser(),\n      ...options.user\n    };\n  }\n  if (!options.eventId) {\n    const eventId = lastEventId();\n    if (eventId) {\n      options.eventId = eventId;\n    }\n  }\n  const script = WINDOW.document.createElement('script');\n  script.async = true;\n  script.crossOrigin = 'anonymous';\n  script.src = getReportDialogEndpoint(dsn, options);\n  if (options.onLoad) {\n    script.onload = options.onLoad;\n  }\n  const {\n    onClose\n  } = options;\n  if (onClose) {\n    const reportDialogClosedMessageHandler = event => {\n      if (event.data === '__sentry_reportdialog_closed__') {\n        try {\n          onClose();\n        } finally {\n          WINDOW.removeEventListener('message', reportDialogClosedMessageHandler);\n        }\n      }\n    };\n    WINDOW.addEventListener('message', reportDialogClosedMessageHandler);\n  }\n  const injectionPoint = WINDOW.document.head || WINDOW.document.body;\n  if (injectionPoint) {\n    injectionPoint.appendChild(script);\n  } else {\n    DEBUG_BUILD && logger.error('Not injecting report dialog. No injection point found in HTML');\n  }\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nfunction forceLoad() {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nfunction onLoad(callback) {\n  callback();\n}\nexport { applyDefaultOptions, forceLoad, getDefaultIntegrations, init, onLoad, showReportDialog };","map":{"version":3,"names":["getDefaultIntegrations","_options","inboundFiltersIntegration","functionToStringIntegration","browserApiErrorsIntegration","breadcrumbsIntegration","globalHandlersIntegration","linkedErrorsIntegration","dedupeIntegration","httpContextIntegration","browserSessionIntegration","applyDefaultOptions","optionsArg","defaultOptions","defaultIntegrations","release","__SENTRY_RELEASE__","WINDOW","SENTRY_RELEASE","id","sendClientReports","dropTopLevelUndefinedKeys","obj","mutatetedObj","k","Object","getOwnPropertyNames","key","undefined","shouldShowBrowserExtensionError","windowWithMaybeExtension","window","extensionKey","chrome","extensionObject","runtimeId","runtime","href","getLocationHref","extensionProtocols","isDedicatedExtensionPage","top","some","protocol","startsWith","isNWjs","nw","init","browserOptions","options","skipBrowserExtensionCheck","DEBUG_BUILD","consoleSandbox","console","error","supportsFetch","logger","warn","clientOptions","stackParser","stackParserFromStackParserOptions","defaultStackParser","integrations","getIntegrationsToSetup","transport","makeFetchTransport","initAndBind","BrowserClient","showReportDialog","document","scope","getCurrentScope","client","getClient","dsn","getDsn","user","getUser","eventId","lastEventId","script","createElement","async","crossOrigin","src","getReportDialogEndpoint","onLoad","onload","onClose","reportDialogClosedMessageHandler","event","data","removeEventListener","addEventListener","injectionPoint","head","body","appendChild","forceLoad","callback"],"sources":["../../../src/sdk.ts"],"sourcesContent":["import type { Client, Integration, Options, ReportDialogOptions } from '@sentry/core';\nimport {\n  consoleSandbox,\n  dedupeIntegration,\n  functionToStringIntegration,\n  getCurrentScope,\n  getIntegrationsToSetup,\n  getLocationHref,\n  getReportDialogEndpoint,\n  inboundFiltersIntegration,\n  initAndBind,\n  lastEventId,\n  logger,\n  stackParserFromStackParserOptions,\n  supportsFetch,\n} from '@sentry/core';\nimport type { BrowserClientOptions, BrowserOptions } from './client';\nimport { BrowserClient } from './client';\nimport { DEBUG_BUILD } from './debug-build';\nimport { WINDOW } from './helpers';\nimport { breadcrumbsIntegration } from './integrations/breadcrumbs';\nimport { browserApiErrorsIntegration } from './integrations/browserapierrors';\nimport { browserSessionIntegration } from './integrations/browsersession';\nimport { globalHandlersIntegration } from './integrations/globalhandlers';\nimport { httpContextIntegration } from './integrations/httpcontext';\nimport { linkedErrorsIntegration } from './integrations/linkederrors';\nimport { defaultStackParser } from './stack-parsers';\nimport { makeFetchTransport } from './transports/fetch';\n\n/** Get the default integrations for the browser SDK. */\nexport function getDefaultIntegrations(_options: Options): Integration[] {\n  /**\n   * Note: Please make sure this stays in sync with Angular SDK, which re-exports\n   * `getDefaultIntegrations` but with an adjusted set of integrations.\n   */\n  return [\n    // TODO(v10): Replace with `eventFiltersIntegration` once we remove the deprecated `inboundFiltersIntegration`\n    // eslint-disable-next-line deprecation/deprecation\n    inboundFiltersIntegration(),\n    functionToStringIntegration(),\n    browserApiErrorsIntegration(),\n    breadcrumbsIntegration(),\n    globalHandlersIntegration(),\n    linkedErrorsIntegration(),\n    dedupeIntegration(),\n    httpContextIntegration(),\n    browserSessionIntegration(),\n  ];\n}\n\n/** Exported only for tests. */\nexport function applyDefaultOptions(optionsArg: BrowserOptions = {}): BrowserOptions {\n  const defaultOptions: BrowserOptions = {\n    defaultIntegrations: getDefaultIntegrations(optionsArg),\n    release:\n      typeof __SENTRY_RELEASE__ === 'string' // This allows build tooling to find-and-replace __SENTRY_RELEASE__ to inject a release value\n        ? __SENTRY_RELEASE__\n        : WINDOW.SENTRY_RELEASE?.id, // This supports the variable that sentry-webpack-plugin injects\n    sendClientReports: true,\n  };\n\n  return {\n    ...defaultOptions,\n    ...dropTopLevelUndefinedKeys(optionsArg),\n  };\n}\n\n/**\n * In contrast to the regular `dropUndefinedKeys` method,\n * this one does not deep-drop keys, but only on the top level.\n */\nfunction dropTopLevelUndefinedKeys<T extends object>(obj: T): Partial<T> {\n  const mutatetedObj: Partial<T> = {};\n\n  for (const k of Object.getOwnPropertyNames(obj)) {\n    const key = k as keyof T;\n    if (obj[key] !== undefined) {\n      mutatetedObj[key] = obj[key];\n    }\n  }\n\n  return mutatetedObj;\n}\n\ntype ExtensionProperties = {\n  chrome?: Runtime;\n  browser?: Runtime;\n  nw?: unknown;\n};\ntype Runtime = {\n  runtime?: {\n    id?: string;\n  };\n};\n\nfunction shouldShowBrowserExtensionError(): boolean {\n  const windowWithMaybeExtension =\n    typeof WINDOW.window !== 'undefined' && (WINDOW as typeof WINDOW & ExtensionProperties);\n  if (!windowWithMaybeExtension) {\n    // No need to show the error if we're not in a browser window environment (e.g. service workers)\n    return false;\n  }\n\n  const extensionKey = windowWithMaybeExtension.chrome ? 'chrome' : 'browser';\n  const extensionObject = windowWithMaybeExtension[extensionKey];\n\n  const runtimeId = extensionObject?.runtime?.id;\n  const href = getLocationHref() || '';\n\n  const extensionProtocols = ['chrome-extension:', 'moz-extension:', 'ms-browser-extension:', 'safari-web-extension:'];\n\n  // Running the SDK in a dedicated extension page and calling Sentry.init is fine; no risk of data leakage\n  const isDedicatedExtensionPage =\n    !!runtimeId && WINDOW === WINDOW.top && extensionProtocols.some(protocol => href.startsWith(`${protocol}//`));\n\n  // Running the SDK in NW.js, which appears like a browser extension but isn't, is also fine\n  // see: https://github.com/getsentry/sentry-javascript/issues/12668\n  const isNWjs = typeof windowWithMaybeExtension.nw !== 'undefined';\n\n  return !!runtimeId && !isDedicatedExtensionPage && !isNWjs;\n}\n\n/**\n * A magic string that build tooling can leverage in order to inject a release value into the SDK.\n */\ndeclare const __SENTRY_RELEASE__: string | undefined;\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(browserOptions: BrowserOptions = {}): Client | undefined {\n  const options = applyDefaultOptions(browserOptions);\n\n  if (!options.skipBrowserExtensionCheck && shouldShowBrowserExtensionError()) {\n    if (DEBUG_BUILD) {\n      consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.error(\n          '[Sentry] You cannot run Sentry this way in a browser extension, check: https://docs.sentry.io/platforms/javascript/best-practices/browser-extensions/',\n        );\n      });\n    }\n    return;\n  }\n\n  if (DEBUG_BUILD && !supportsFetch()) {\n    logger.warn(\n      'No Fetch API detected. The Sentry SDK requires a Fetch API compatible environment to send events. Please add a Fetch API polyfill.',\n    );\n  }\n  const clientOptions: BrowserClientOptions = {\n    ...options,\n    stackParser: stackParserFromStackParserOptions(options.stackParser || defaultStackParser),\n    integrations: getIntegrationsToSetup(options),\n    transport: options.transport || makeFetchTransport,\n  };\n\n  return initAndBind(BrowserClient, clientOptions);\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  // doesn't work without a document (React Native)\n  if (!WINDOW.document) {\n    DEBUG_BUILD && logger.error('Global document not defined in showReportDialog call');\n    return;\n  }\n\n  const scope = getCurrentScope();\n  const client = scope.getClient();\n  const dsn = client?.getDsn();\n\n  if (!dsn) {\n    DEBUG_BUILD && logger.error('DSN not configured for showReportDialog call');\n    return;\n  }\n\n  if (scope) {\n    options.user = {\n      ...scope.getUser(),\n      ...options.user,\n    };\n  }\n\n  if (!options.eventId) {\n    const eventId = lastEventId();\n    if (eventId) {\n      options.eventId = eventId;\n    }\n  }\n\n  const script = WINDOW.document.createElement('script');\n  script.async = true;\n  script.crossOrigin = 'anonymous';\n  script.src = getReportDialogEndpoint(dsn, options);\n\n  if (options.onLoad) {\n    script.onload = options.onLoad;\n  }\n\n  const { onClose } = options;\n  if (onClose) {\n    const reportDialogClosedMessageHandler = (event: MessageEvent): void => {\n      if (event.data === '__sentry_reportdialog_closed__') {\n        try {\n          onClose();\n        } finally {\n          WINDOW.removeEventListener('message', reportDialogClosedMessageHandler);\n        }\n      }\n    };\n    WINDOW.addEventListener('message', reportDialogClosedMessageHandler);\n  }\n\n  const injectionPoint = WINDOW.document.head || WINDOW.document.body;\n  if (injectionPoint) {\n    injectionPoint.appendChild(script);\n  } else {\n    DEBUG_BUILD && logger.error('Not injecting report dialog. No injection point found in HTML');\n  }\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}