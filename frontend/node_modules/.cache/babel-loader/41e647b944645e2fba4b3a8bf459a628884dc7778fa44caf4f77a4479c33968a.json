{"ast":null,"code":"// Curious about `thismessage:/`? See: https://www.rfc-editor.org/rfc/rfc2557.html\n//  > When the methods above do not yield an absolute URI, a base URL\n//  > of \"thismessage:/\" MUST be employed. This base URL has been\n//  > defined for the sole purpose of resolving relative references\n//  > within a multipart/related structure when no other base URI is\n//  > specified.\n//\n// We need to provide a base URL to `parseStringToURLObject` because the fetch API gives us a\n// relative URL sometimes.\n//\n// This is the only case where we need to provide a base URL to `parseStringToURLObject`\n// because the relative URL is not valid on its own.\nconst DEFAULT_BASE_URL = 'thismessage:/';\n\n/**\n * Checks if the URL object is relative\n *\n * @param url - The URL object to check\n * @returns True if the URL object is relative, false otherwise\n */\nfunction isURLObjectRelative(url) {\n  return 'isRelative' in url;\n}\n\n/**\n * Parses string to a URL object\n *\n * @param url - The URL to parse\n * @returns The parsed URL object or undefined if the URL is invalid\n */\nfunction parseStringToURLObject(url, urlBase) {\n  const isRelative = url.startsWith('/');\n  const base = urlBase ?? (isRelative ? DEFAULT_BASE_URL : undefined);\n  try {\n    // Use `canParse` to short-circuit the URL constructor if it's not a valid URL\n    // This is faster than trying to construct the URL and catching the error\n    // Node 20+, Chrome 120+, Firefox 115+, Safari 17+\n    if ('canParse' in URL && !URL.canParse(url, base)) {\n      return undefined;\n    }\n    const fullUrlObject = new URL(url, base);\n    if (isRelative) {\n      // Because we used a fake base URL, we need to return a relative URL object.\n      // We cannot return anything about the origin, host, etc. because it will refer to the fake base URL.\n      return {\n        isRelative,\n        pathname: fullUrlObject.pathname,\n        search: fullUrlObject.search,\n        hash: fullUrlObject.hash\n      };\n    }\n    return fullUrlObject;\n  } catch {\n    // empty body\n  }\n  return undefined;\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nfunction getSanitizedUrlStringFromUrlObject(url) {\n  if (isURLObjectRelative(url)) {\n    return url.pathname;\n  }\n  const newUrl = new URL(url);\n  newUrl.search = '';\n  newUrl.hash = '';\n  if (['80', '443'].includes(newUrl.port)) {\n    newUrl.port = '';\n  }\n  if (newUrl.password) {\n    newUrl.password = '%filtered%';\n  }\n  if (newUrl.username) {\n    newUrl.username = '%filtered%';\n  }\n  return newUrl.toString();\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nfunction parseUrl(url) {\n  if (!url) {\n    return {};\n  }\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    search: query,\n    hash: fragment,\n    relative: match[5] + query + fragment // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nfunction stripUrlQueryAndFragment(urlPath) {\n  return urlPath.split(/[?#]/, 1)[0];\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nfunction getSanitizedUrlString(url) {\n  const {\n    protocol,\n    host,\n    path\n  } = url;\n  const filteredHost = host\n  // Always filter out authority\n  ?.replace(/^.*@/, '[filtered]:[filtered]@')\n  // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n  // TODO: Use new URL global if it exists\n  .replace(/(:80)$/, '').replace(/(:443)$/, '') || '';\n  return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;\n}\nexport { getSanitizedUrlString, getSanitizedUrlStringFromUrlObject, isURLObjectRelative, parseStringToURLObject, parseUrl, stripUrlQueryAndFragment };","map":{"version":3,"names":["DEFAULT_BASE_URL","isURLObjectRelative","url","parseStringToURLObject","urlBase","isRelative","startsWith","base","undefined","URL","canParse","fullUrlObject","pathname","search","hash","getSanitizedUrlStringFromUrlObject","newUrl","includes","port","password","username","toString","parseUrl","match","query","fragment","host","path","protocol","relative","stripUrlQueryAndFragment","urlPath","split","getSanitizedUrlString","filteredHost","replace"],"sources":["C:\\Users\\chitt\\OneDrive\\Documents\\Projects\\fresh-bulk\\frontend\\node_modules\\@sentry\\core\\src\\utils-hoist\\url.ts"],"sourcesContent":["type PartialURL = {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n  search?: string;\n  hash?: string;\n};\n\ninterface URLwithCanParse extends URL {\n  canParse: (url: string, base?: string | URL | undefined) => boolean;\n}\n\n// A subset of the URL object that is valid for relative URLs\n// The URL object cannot handle relative URLs, so we need to handle them separately\ntype RelativeURL = {\n  isRelative: true;\n  pathname: URL['pathname'];\n  search: URL['search'];\n  hash: URL['hash'];\n};\n\ntype URLObject = RelativeURL | URL;\n\n// Curious about `thismessage:/`? See: https://www.rfc-editor.org/rfc/rfc2557.html\n//  > When the methods above do not yield an absolute URI, a base URL\n//  > of \"thismessage:/\" MUST be employed. This base URL has been\n//  > defined for the sole purpose of resolving relative references\n//  > within a multipart/related structure when no other base URI is\n//  > specified.\n//\n// We need to provide a base URL to `parseStringToURLObject` because the fetch API gives us a\n// relative URL sometimes.\n//\n// This is the only case where we need to provide a base URL to `parseStringToURLObject`\n// because the relative URL is not valid on its own.\nconst DEFAULT_BASE_URL = 'thismessage:/';\n\n/**\n * Checks if the URL object is relative\n *\n * @param url - The URL object to check\n * @returns True if the URL object is relative, false otherwise\n */\nexport function isURLObjectRelative(url: URLObject): url is RelativeURL {\n  return 'isRelative' in url;\n}\n\n/**\n * Parses string to a URL object\n *\n * @param url - The URL to parse\n * @returns The parsed URL object or undefined if the URL is invalid\n */\nexport function parseStringToURLObject(url: string, urlBase?: string | URL | undefined): URLObject | undefined {\n  const isRelative = url.startsWith('/');\n  const base = urlBase ?? (isRelative ? DEFAULT_BASE_URL : undefined);\n  try {\n    // Use `canParse` to short-circuit the URL constructor if it's not a valid URL\n    // This is faster than trying to construct the URL and catching the error\n    // Node 20+, Chrome 120+, Firefox 115+, Safari 17+\n    if ('canParse' in URL && !(URL as unknown as URLwithCanParse).canParse(url, base)) {\n      return undefined;\n    }\n\n    const fullUrlObject = new URL(url, base);\n    if (isRelative) {\n      // Because we used a fake base URL, we need to return a relative URL object.\n      // We cannot return anything about the origin, host, etc. because it will refer to the fake base URL.\n      return {\n        isRelative,\n        pathname: fullUrlObject.pathname,\n        search: fullUrlObject.search,\n        hash: fullUrlObject.hash,\n      };\n    }\n    return fullUrlObject;\n  } catch {\n    // empty body\n  }\n\n  return undefined;\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nexport function getSanitizedUrlStringFromUrlObject(url: URLObject): string {\n  if (isURLObjectRelative(url)) {\n    return url.pathname;\n  }\n\n  const newUrl = new URL(url);\n  newUrl.search = '';\n  newUrl.hash = '';\n  if (['80', '443'].includes(newUrl.port)) {\n    newUrl.port = '';\n  }\n  if (newUrl.password) {\n    newUrl.password = '%filtered%';\n  }\n  if (newUrl.username) {\n    newUrl.username = '%filtered%';\n  }\n\n  return newUrl.toString();\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(url: string): PartialURL {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    search: query,\n    hash: fragment,\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  return (urlPath.split(/[?#]/, 1) as [string, ...string[]])[0];\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nexport function getSanitizedUrlString(url: PartialURL): string {\n  const { protocol, host, path } = url;\n\n  const filteredHost =\n    host\n      // Always filter out authority\n      ?.replace(/^.*@/, '[filtered]:[filtered]@')\n      // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n      // TODO: Use new URL global if it exists\n      .replace(/(:80)$/, '')\n      .replace(/(:443)$/, '') || '';\n\n  return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}