{"ast":null,"code":"import { bindReporter } from './lib/bindReporter.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\nimport { runOnce } from './lib/runOnce.js';\nimport { onFCP } from './onFCP.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Thresholds for CLS. See https://web.dev/articles/cls#what_is_a_good_cls_score */\nconst CLSThresholds = [0.1, 0.25];\n\n/**\n * Calculates the [CLS](https://web.dev/articles/cls) value for the current page and\n * calls the `callback` function once the value is ready to be reported, along\n * with all `layout-shift` performance entries that were used in the metric\n * value calculation. The reported value is a `double` (corresponding to a\n * [layout shift score](https://web.dev/articles/cls#layout_shift_score)).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** CLS should be continually monitored for changes throughout\n * the entire lifespan of a page—including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nconst onCLS = (onReport, opts = {}) => {\n  // Start monitoring FCP so we can only report CLS if FCP is also reported.\n  // Note: this is done to match the current behavior of CrUX.\n  onFCP(runOnce(() => {\n    const metric = initMetric('CLS', 0);\n    let report;\n    let sessionValue = 0;\n    let sessionEntries = [];\n    const handleEntries = entries => {\n      entries.forEach(entry => {\n        // Only count layout shifts without recent user input.\n        if (!entry.hadRecentInput) {\n          const firstSessionEntry = sessionEntries[0];\n          const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n          // If the entry occurred less than 1 second after the previous entry\n          // and less than 5 seconds after the first entry in the session,\n          // include the entry in the current session. Otherwise, start a new\n          // session.\n          if (sessionValue && firstSessionEntry && lastSessionEntry && entry.startTime - lastSessionEntry.startTime < 1000 && entry.startTime - firstSessionEntry.startTime < 5000) {\n            sessionValue += entry.value;\n            sessionEntries.push(entry);\n          } else {\n            sessionValue = entry.value;\n            sessionEntries = [entry];\n          }\n        }\n      });\n\n      // If the current session value is larger than the current CLS value,\n      // update CLS and the entries contributing to it.\n      if (sessionValue > metric.value) {\n        metric.value = sessionValue;\n        metric.entries = sessionEntries;\n        report();\n      }\n    };\n    const po = observe('layout-shift', handleEntries);\n    if (po) {\n      report = bindReporter(onReport, metric, CLSThresholds, opts.reportAllChanges);\n      onHidden(() => {\n        handleEntries(po.takeRecords());\n        report(true);\n      });\n\n      // Queue a task to report (if nothing else triggers a report first).\n      // This allows CLS to be reported as soon as FCP fires when\n      // `reportAllChanges` is true.\n      setTimeout(report, 0);\n    }\n  }));\n};\nexport { CLSThresholds, onCLS };","map":{"version":3,"names":["CLSThresholds","onCLS","onReport","opts","onFCP","runOnce","metric","initMetric","report","sessionValue","sessionEntries","handleEntries","entries","forEach","entry","hadRecentInput","firstSessionEntry","lastSessionEntry","length","startTime","value","push","po","observe","bindReporter","reportAllChanges","onHidden","takeRecords","setTimeout"],"sources":["C:\\Users\\chitt\\OneDrive\\Documents\\Projects\\fresh-bulk\\frontend\\node_modules\\@sentry-internal\\browser-utils\\src\\metrics\\web-vitals\\getCLS.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { runOnce } from './lib/runOnce';\nimport { onFCP } from './onFCP';\nimport type { CLSMetric, MetricRatingThresholds, ReportOpts } from './types';\n\n/** Thresholds for CLS. See https://web.dev/articles/cls#what_is_a_good_cls_score */\nexport const CLSThresholds: MetricRatingThresholds = [0.1, 0.25];\n\n/**\n * Calculates the [CLS](https://web.dev/articles/cls) value for the current page and\n * calls the `callback` function once the value is ready to be reported, along\n * with all `layout-shift` performance entries that were used in the metric\n * value calculation. The reported value is a `double` (corresponding to a\n * [layout shift score](https://web.dev/articles/cls#layout_shift_score)).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** CLS should be continually monitored for changes throughout\n * the entire lifespan of a page—including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nexport const onCLS = (onReport: (metric: CLSMetric) => void, opts: ReportOpts = {}) => {\n  // Start monitoring FCP so we can only report CLS if FCP is also reported.\n  // Note: this is done to match the current behavior of CrUX.\n  onFCP(\n    runOnce(() => {\n      const metric = initMetric('CLS', 0);\n      let report: ReturnType<typeof bindReporter>;\n\n      let sessionValue = 0;\n      let sessionEntries: LayoutShift[] = [];\n\n      const handleEntries = (entries: LayoutShift[]) => {\n        entries.forEach(entry => {\n          // Only count layout shifts without recent user input.\n          if (!entry.hadRecentInput) {\n            const firstSessionEntry = sessionEntries[0];\n            const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n            // If the entry occurred less than 1 second after the previous entry\n            // and less than 5 seconds after the first entry in the session,\n            // include the entry in the current session. Otherwise, start a new\n            // session.\n            if (\n              sessionValue &&\n              firstSessionEntry &&\n              lastSessionEntry &&\n              entry.startTime - lastSessionEntry.startTime < 1000 &&\n              entry.startTime - firstSessionEntry.startTime < 5000\n            ) {\n              sessionValue += entry.value;\n              sessionEntries.push(entry);\n            } else {\n              sessionValue = entry.value;\n              sessionEntries = [entry];\n            }\n          }\n        });\n\n        // If the current session value is larger than the current CLS value,\n        // update CLS and the entries contributing to it.\n        if (sessionValue > metric.value) {\n          metric.value = sessionValue;\n          metric.entries = sessionEntries;\n          report();\n        }\n      };\n\n      const po = observe('layout-shift', handleEntries);\n      if (po) {\n        report = bindReporter(onReport, metric, CLSThresholds, opts.reportAllChanges);\n\n        onHidden(() => {\n          handleEntries(po.takeRecords() as CLSMetric['entries']);\n          report(true);\n        });\n\n        // Queue a task to report (if nothing else triggers a report first).\n        // This allows CLS to be reported as soon as FCP fires when\n        // `reportAllChanges` is true.\n        setTimeout(report, 0);\n      }\n    }),\n  );\n};\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUA;AACO,MAAMA,aAAa,GAA2B,CAAC,GAAG,EAAE,IAAI;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa,MAAAC,KAAA,GAAQA,CAACC,QAAQ,EAA+BC,IAAI,GAAe,EAAE,KAAK;EACvF;EACA;EACEC,KAAK,CACHC,OAAO,CAAC,MAAM;IACZ,MAAMC,MAAA,GAASC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC;IACnC,IAAIC,MAAM;IAEV,IAAIC,YAAa,GAAE,CAAC;IACpB,IAAIC,cAAc,GAAkB,EAAE;IAEtC,MAAMC,aAAc,GAAGC,OAAO,IAAoB;MAChDA,OAAO,CAACC,OAAO,CAACC,KAAA,IAAS;QACjC;QACU,IAAI,CAACA,KAAK,CAACC,cAAc,EAAE;UACzB,MAAMC,iBAAkB,GAAEN,cAAc,CAAC,CAAC,CAAC;UAC3C,MAAMO,gBAAiB,GAAEP,cAAc,CAACA,cAAc,CAACQ,MAAA,GAAS,CAAC,CAAC;;UAE9E;UACA;UACA;UACA;UACY,IACET,YAAa,IACbO,iBAAkB,IAClBC,gBAAiB,IACjBH,KAAK,CAACK,SAAU,GAAEF,gBAAgB,CAACE,SAAA,GAAY,IAAK,IACpDL,KAAK,CAACK,SAAA,GAAYH,iBAAiB,CAACG,SAAA,GAAY,MAChD;YACAV,YAAa,IAAGK,KAAK,CAACM,KAAK;YAC3BV,cAAc,CAACW,IAAI,CAACP,KAAK,CAAC;UACxC,OAAmB;YACLL,YAAa,GAAEK,KAAK,CAACM,KAAK;YAC1BV,cAAe,GAAE,CAACI,KAAK,CAAC;UACtC;QACA;MACA,CAAS,CAAC;;MAEV;MACA;MACQ,IAAIL,YAAA,GAAeH,MAAM,CAACc,KAAK,EAAE;QAC/Bd,MAAM,CAACc,KAAM,GAAEX,YAAY;QAC3BH,MAAM,CAACM,OAAQ,GAAEF,cAAc;QAC/BF,MAAM,EAAE;MAClB;IACA,CAAO;IAED,MAAMc,EAAA,GAAKC,OAAO,CAAC,cAAc,EAAEZ,aAAa,CAAC;IACjD,IAAIW,EAAE,EAAE;MACNd,MAAO,GAAEgB,YAAY,CAACtB,QAAQ,EAAEI,MAAM,EAAEN,aAAa,EAAEG,IAAI,CAACsB,gBAAgB,CAAC;MAE7EC,QAAQ,CAAC,MAAM;QACbf,aAAa,CAACW,EAAE,CAACK,WAAW,GAA2B;QACvDnB,MAAM,CAAC,IAAI,CAAC;MACtB,CAAS,CAAC;;MAEV;MACA;MACA;MACQoB,UAAU,CAACpB,MAAM,EAAE,CAAC,CAAC;IAC7B;EACA,CAAK,CACL,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}