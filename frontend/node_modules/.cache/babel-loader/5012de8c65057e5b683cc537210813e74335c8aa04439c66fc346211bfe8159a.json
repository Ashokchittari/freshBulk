{"ast":null,"code":"import { dsnToString } from '../utils-hoist/dsn.js';\nimport '../utils-hoist/logger.js';\nimport '../utils-hoist/debug-build.js';\nimport '../utils-hoist/time.js';\nimport '../utils-hoist/syncpromise.js';\nimport { createEnvelope } from '../utils-hoist/envelope.js';\n\n/**\n * Creates OTEL log envelope item for a serialized OTEL log.\n *\n * @param log - The serialized OTEL log to include in the envelope.\n * @returns The created OTEL log envelope item.\n */\nfunction createOtelLogEnvelopeItem(log) {\n  return [{\n    type: 'otel_log'\n  }, log];\n}\n\n/**\n * Creates an envelope for a list of logs.\n *\n * @param logs - The logs to include in the envelope.\n * @param metadata - The metadata to include in the envelope.\n * @param tunnel - The tunnel to include in the envelope.\n * @param dsn - The DSN to include in the envelope.\n * @returns The created envelope.\n */\nfunction createOtelLogEnvelope(logs, metadata, tunnel, dsn) {\n  const headers = {};\n  if (metadata?.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version\n    };\n  }\n  if (!!tunnel && !!dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n  return createEnvelope(headers, logs.map(createOtelLogEnvelopeItem));\n}\nexport { createOtelLogEnvelope, createOtelLogEnvelopeItem };","map":{"version":3,"names":["createOtelLogEnvelopeItem","log","type","createOtelLogEnvelope","logs","metadata","tunnel","dsn","headers","sdk","name","version","dsnToString","createEnvelope","map"],"sources":["C:\\Users\\chitt\\OneDrive\\Documents\\Projects\\fresh-bulk\\frontend\\node_modules\\@sentry\\core\\src\\logs\\envelope.ts"],"sourcesContent":["import { createEnvelope } from '../utils-hoist';\n\nimport type { DsnComponents, SdkMetadata, SerializedOtelLog } from '../types-hoist';\nimport type { OtelLogEnvelope, OtelLogItem } from '../types-hoist/envelope';\nimport { dsnToString } from '../utils-hoist';\n\n/**\n * Creates OTEL log envelope item for a serialized OTEL log.\n *\n * @param log - The serialized OTEL log to include in the envelope.\n * @returns The created OTEL log envelope item.\n */\nexport function createOtelLogEnvelopeItem(log: SerializedOtelLog): OtelLogItem {\n  return [\n    {\n      type: 'otel_log',\n    },\n    log,\n  ];\n}\n\n/**\n * Creates an envelope for a list of logs.\n *\n * @param logs - The logs to include in the envelope.\n * @param metadata - The metadata to include in the envelope.\n * @param tunnel - The tunnel to include in the envelope.\n * @param dsn - The DSN to include in the envelope.\n * @returns The created envelope.\n */\nexport function createOtelLogEnvelope(\n  logs: Array<SerializedOtelLog>,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n  dsn?: DsnComponents,\n): OtelLogEnvelope {\n  const headers: OtelLogEnvelope[0] = {};\n\n  if (metadata?.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && !!dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n\n  return createEnvelope<OtelLogEnvelope>(headers, logs.map(createOtelLogEnvelopeItem));\n}\n"],"mappings":";;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,yBAAyBA,CAACC,GAAG,EAAkC;EAC7E,OAAO,CACL;IACEC,IAAI,EAAE;EACZ,CAAK,EACDD,GAAG,CACJ;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,qBAAqBA,CACnCC,IAAI,EACJC,QAAQ,EACRC,MAAM,EACNC,GAAG,EACc;EACjB,MAAMC,OAAO,GAAuB,EAAE;EAEtC,IAAIH,QAAQ,EAAEI,GAAG,EAAE;IACjBD,OAAO,CAACC,GAAA,GAAM;MACZC,IAAI,EAAEL,QAAQ,CAACI,GAAG,CAACC,IAAI;MACvBC,OAAO,EAAEN,QAAQ,CAACI,GAAG,CAACE;IAC5B,CAAK;EACL;EAEE,IAAI,CAAC,CAACL,MAAA,IAAU,CAAC,CAACC,GAAG,EAAE;IACrBC,OAAO,CAACD,GAAA,GAAMK,WAAW,CAACL,GAAG,CAAC;EAClC;EAEE,OAAOM,cAAc,CAAkBL,OAAO,EAAEJ,IAAI,CAACU,GAAG,CAACd,yBAAyB,CAAC,CAAC;AACtF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}