{"ast":null,"code":"import { defineIntegration } from '@sentry/core';\nimport { copyFlagsFromScopeToEvent, insertFlagToScope } from '../../../utils/featureFlags.js';\nconst openFeatureIntegration = defineIntegration(() => {\n  return {\n    name: 'OpenFeature',\n    processEvent(event, _hint, _client) {\n      return copyFlagsFromScopeToEvent(event);\n    }\n  };\n});\n\n/**\n * OpenFeature Hook class implementation.\n */\nclass OpenFeatureIntegrationHook {\n  /**\n   * Successful evaluation result.\n   */\n  after(_hookContext, evaluationDetails) {\n    insertFlagToScope(evaluationDetails.flagKey, evaluationDetails.value);\n  }\n\n  /**\n   * On error evaluation result.\n   */\n  error(hookContext, _error, _hookHints) {\n    insertFlagToScope(hookContext.flagKey, hookContext.defaultValue);\n  }\n}\nexport { OpenFeatureIntegrationHook, openFeatureIntegration };","map":{"version":3,"names":["openFeatureIntegration","defineIntegration","name","processEvent","event","_hint","_client","copyFlagsFromScopeToEvent","OpenFeatureIntegrationHook","after","_hookContext","evaluationDetails","insertFlagToScope","flagKey","value","error","hookContext","_error","_hookHints","defaultValue"],"sources":["C:\\Users\\chitt\\OneDrive\\Documents\\Projects\\fresh-bulk\\frontend\\node_modules\\@sentry\\browser\\src\\integrations\\featureFlags\\openfeature\\integration.ts"],"sourcesContent":["/**\n * OpenFeature integration.\n *\n * Add the openFeatureIntegration() function call to your integration lists.\n * Add the integration hook to your OpenFeature object.\n *   - OpenFeature.getClient().addHooks(new OpenFeatureIntegrationHook());\n */\nimport type { Client, Event, EventHint, IntegrationFn } from '@sentry/core';\nimport type { EvaluationDetails, HookContext, HookHints, JsonValue, OpenFeatureHook } from './types';\n\nimport { defineIntegration } from '@sentry/core';\nimport { copyFlagsFromScopeToEvent, insertFlagToScope } from '../../../utils/featureFlags';\n\nexport const openFeatureIntegration = defineIntegration(() => {\n  return {\n    name: 'OpenFeature',\n\n    processEvent(event: Event, _hint: EventHint, _client: Client): Event {\n      return copyFlagsFromScopeToEvent(event);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * OpenFeature Hook class implementation.\n */\nexport class OpenFeatureIntegrationHook implements OpenFeatureHook {\n  /**\n   * Successful evaluation result.\n   */\n  public after(_hookContext: Readonly<HookContext<JsonValue>>, evaluationDetails: EvaluationDetails<JsonValue>): void {\n    insertFlagToScope(evaluationDetails.flagKey, evaluationDetails.value);\n  }\n\n  /**\n   * On error evaluation result.\n   */\n  public error(hookContext: Readonly<HookContext<JsonValue>>, _error: unknown, _hookHints?: HookHints): void {\n    insertFlagToScope(hookContext.flagKey, hookContext.defaultValue);\n  }\n}\n"],"mappings":";;MAaaA,sBAAuB,GAAEC,iBAAiB,CAAC,MAAM;EAC5D,OAAO;IACLC,IAAI,EAAE,aAAa;IAEnBC,YAAYA,CAACC,KAAK,EAASC,KAAK,EAAaC,OAAO,EAAiB;MACnE,OAAOC,yBAAyB,CAACH,KAAK,CAAC;IAC7C;EACA,CAAG;AACH,CAAC,CAAE;;AAEH;AACA;AACA;AACO,MAAMI,0BAAA,CAAsD;EACnE;AACA;AACA;EACSC,KAAKA,CAACC,YAAY,EAAoCC,iBAAiB,EAAsC;IAClHC,iBAAiB,CAACD,iBAAiB,CAACE,OAAO,EAAEF,iBAAiB,CAACG,KAAK,CAAC;EACzE;;EAEA;AACA;AACA;EACSC,KAAKA,CAACC,WAAW,EAAoCC,MAAM,EAAWC,UAAU,EAAoB;IACzGN,iBAAiB,CAACI,WAAW,CAACH,OAAO,EAAEG,WAAW,CAACG,YAAY,CAAC;EACpE;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}