{"ast":null,"code":"import { defineIntegration } from '../integration.js';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { logger } from '../utils-hoist/logger.js';\nimport { getFramesFromEvent } from '../utils-hoist/stacktrace.js';\nconst INTEGRATION_NAME = 'Dedupe';\nconst _dedupeIntegration = () => {\n  let previousEvent;\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(currentEvent) {\n      // We want to ignore any non-error type events, e.g. transactions or replays\n      // These should never be deduped, and also not be compared against as _previousEvent.\n      if (currentEvent.type) {\n        return currentEvent;\n      }\n\n      // Juuust in case something goes wrong\n      try {\n        if (_shouldDropEvent(currentEvent, previousEvent)) {\n          DEBUG_BUILD && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n          return null;\n        }\n      } catch (_oO) {} // eslint-disable-line no-empty\n\n      return previousEvent = currentEvent;\n    }\n  };\n};\n\n/**\n * Deduplication filter.\n */\nconst dedupeIntegration = defineIntegration(_dedupeIntegration);\n\n/** only exported for tests. */\nfunction _shouldDropEvent(currentEvent, previousEvent) {\n  if (!previousEvent) {\n    return false;\n  }\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n  return false;\n}\nfunction _isSameMessageEvent(currentEvent, previousEvent) {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if (currentMessage && !previousMessage || !currentMessage && previousMessage) {\n    return false;\n  }\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n  return true;\n}\nfunction _isSameExceptionEvent(currentEvent, previousEvent) {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n  if (!previousException || !currentException) {\n    return false;\n  }\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n  return true;\n}\nfunction _isSameStacktrace(currentEvent, previousEvent) {\n  let currentFrames = getFramesFromEvent(currentEvent);\n  let previousFrames = getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if (currentFrames && !previousFrames || !currentFrames && previousFrames) {\n    return false;\n  }\n  currentFrames = currentFrames;\n  previousFrames = previousFrames;\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameA = previousFrames[i];\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameB = currentFrames[i];\n    if (frameA.filename !== frameB.filename || frameA.lineno !== frameB.lineno || frameA.colno !== frameB.colno || frameA.function !== frameB.function) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction _isSameFingerprint(currentEvent, previousEvent) {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if (currentFingerprint && !previousFingerprint || !currentFingerprint && previousFingerprint) {\n    return false;\n  }\n  currentFingerprint = currentFingerprint;\n  previousFingerprint = previousFingerprint;\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\nfunction _getExceptionFromEvent(event) {\n  return event.exception?.values && event.exception.values[0];\n}\nexport { _shouldDropEvent, dedupeIntegration };","map":{"version":3,"names":["INTEGRATION_NAME","_dedupeIntegration","previousEvent","name","processEvent","currentEvent","type","_shouldDropEvent","DEBUG_BUILD","logger","warn","_oO","dedupeIntegration","defineIntegration","_isSameMessageEvent","_isSameExceptionEvent","currentMessage","message","previousMessage","_isSameFingerprint","_isSameStacktrace","previousException","_getExceptionFromEvent","currentException","value","currentFrames","getFramesFromEvent","previousFrames","length","i","frameA","frameB","filename","lineno","colno","function","currentFingerprint","fingerprint","previousFingerprint","join","event","exception","values"],"sources":["C:\\Users\\chitt\\OneDrive\\Documents\\Projects\\fresh-bulk\\frontend\\node_modules\\@sentry\\core\\src\\integrations\\dedupe.ts"],"sourcesContent":["import { defineIntegration } from '../integration';\nimport type { Event, Exception, IntegrationFn, StackFrame } from '../types-hoist';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { logger } from '../utils-hoist/logger';\nimport { getFramesFromEvent } from '../utils-hoist/stacktrace';\n\nconst INTEGRATION_NAME = 'Dedupe';\n\nconst _dedupeIntegration = (() => {\n  let previousEvent: Event | undefined;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(currentEvent) {\n      // We want to ignore any non-error type events, e.g. transactions or replays\n      // These should never be deduped, and also not be compared against as _previousEvent.\n      if (currentEvent.type) {\n        return currentEvent;\n      }\n\n      // Juuust in case something goes wrong\n      try {\n        if (_shouldDropEvent(currentEvent, previousEvent)) {\n          DEBUG_BUILD && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n          return null;\n        }\n      } catch (_oO) {} // eslint-disable-line no-empty\n\n      return (previousEvent = currentEvent);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Deduplication filter.\n */\nexport const dedupeIntegration = defineIntegration(_dedupeIntegration);\n\n/** only exported for tests. */\nexport function _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFrames = getFramesFromEvent(currentEvent);\n  let previousFrames = getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames as StackFrame[];\n  previousFrames = previousFrames as StackFrame[];\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameA = previousFrames[i]!;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameB = currentFrames[i]!;\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint as string[];\n  previousFingerprint = previousFingerprint as string[];\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\nfunction _getExceptionFromEvent(event: Event): Exception | undefined {\n  return event.exception?.values && event.exception.values[0];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}