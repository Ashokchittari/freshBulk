{"ast":null,"code":"import { getMainCarrier } from '../carrier.js';\nimport { withScope, getCurrentScope, getClient, getIsolationScope } from '../currentScopes.js';\nimport { getAsyncContextStrategy } from '../asyncContext/index.js';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE } from '../semanticAttributes.js';\nimport { logger } from '../utils-hoist/logger.js';\nimport { generateTraceId } from '../utils-hoist/propagationContext.js';\nimport { propagationContextFromHeaders } from '../utils-hoist/tracing.js';\nimport { handleCallbackErrors } from '../utils/handleCallbackErrors.js';\nimport { hasSpansEnabled } from '../utils/hasSpansEnabled.js';\nimport { parseSampleRate } from '../utils/parseSampleRate.js';\nimport { _setSpanForScope, _getSpanForScope } from '../utils/spanOnScope.js';\nimport { spanToJSON, spanTimeInputToSeconds, getRootSpan, addChildSpanToSpan, spanIsSampled } from '../utils/spanUtils.js';\nimport { getDynamicSamplingContextFromSpan, freezeDscOnSpan } from './dynamicSamplingContext.js';\nimport { logSpanStart } from './logSpans.js';\nimport { sampleSpan } from './sampling.js';\nimport { SentryNonRecordingSpan } from './sentryNonRecordingSpan.js';\nimport { SentrySpan } from './sentrySpan.js';\nimport { SPAN_STATUS_ERROR } from './spanstatus.js';\nimport { setCapturedScopesOnSpan } from './utils.js';\nconst SUPPRESS_TRACING_KEY = '__SENTRY_SUPPRESS_TRACING__';\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpan(options, callback) {\n  const acs = getAcs();\n  if (acs.startSpan) {\n    return acs.startSpan(options, callback);\n  }\n  const spanArguments = parseSentrySpanArguments(options);\n  const {\n    forceTransaction,\n    parentSpan: customParentSpan,\n    scope: customScope\n  } = options;\n\n  // We still need to fork a potentially passed scope, as we set the active span on it\n  // and we need to ensure that it is cleaned up properly once the span ends.\n  const customForkedScope = customScope?.clone();\n  return withScope(customForkedScope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper(customParentSpan);\n    return wrapper(() => {\n      const scope = getCurrentScope();\n      const parentSpan = getParentSpan(scope);\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan ? new SentryNonRecordingSpan() : createChildOrRootSpan({\n        parentSpan,\n        spanArguments,\n        forceTransaction,\n        scope\n      });\n      _setSpanForScope(scope, activeSpan);\n      return handleCallbackErrors(() => callback(activeSpan), () => {\n        // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n        const {\n          status\n        } = spanToJSON(activeSpan);\n        if (activeSpan.isRecording() && (!status || status === 'ok')) {\n          activeSpan.setStatus({\n            code: SPAN_STATUS_ERROR,\n            message: 'internal_error'\n          });\n        }\n      }, () => {\n        activeSpan.end();\n      });\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span\n * after the function is done automatically. Use `span.end()` to end the span.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpanManual(options, callback) {\n  const acs = getAcs();\n  if (acs.startSpanManual) {\n    return acs.startSpanManual(options, callback);\n  }\n  const spanArguments = parseSentrySpanArguments(options);\n  const {\n    forceTransaction,\n    parentSpan: customParentSpan,\n    scope: customScope\n  } = options;\n  const customForkedScope = customScope?.clone();\n  return withScope(customForkedScope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper(customParentSpan);\n    return wrapper(() => {\n      const scope = getCurrentScope();\n      const parentSpan = getParentSpan(scope);\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan ? new SentryNonRecordingSpan() : createChildOrRootSpan({\n        parentSpan,\n        spanArguments,\n        forceTransaction,\n        scope\n      });\n      _setSpanForScope(scope, activeSpan);\n      return handleCallbackErrors(\n      // We pass the `finish` function to the callback, so the user can finish the span manually\n      // this is mainly here for historic purposes because previously, we instructed users to call\n      // `finish` instead of `span.end()` to also clean up the scope. Nowadays, calling `span.end()`\n      // or `finish` has the same effect and we simply leave it here to avoid breaking user code.\n      () => callback(activeSpan, () => activeSpan.end()), () => {\n        // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n        const {\n          status\n        } = spanToJSON(activeSpan);\n        if (activeSpan.isRecording() && (!status || status === 'ok')) {\n          activeSpan.setStatus({\n            code: SPAN_STATUS_ERROR,\n            message: 'internal_error'\n          });\n        }\n      });\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startInactiveSpan(options) {\n  const acs = getAcs();\n  if (acs.startInactiveSpan) {\n    return acs.startInactiveSpan(options);\n  }\n  const spanArguments = parseSentrySpanArguments(options);\n  const {\n    forceTransaction,\n    parentSpan: customParentSpan\n  } = options;\n\n  // If `options.scope` is defined, we use this as as a wrapper,\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = options.scope ? callback => withScope(options.scope, callback) : customParentSpan !== undefined ? callback => withActiveSpan(customParentSpan, callback) : callback => callback();\n  return wrapper(() => {\n    const scope = getCurrentScope();\n    const parentSpan = getParentSpan(scope);\n    const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n    if (shouldSkipSpan) {\n      return new SentryNonRecordingSpan();\n    }\n    return createChildOrRootSpan({\n      parentSpan,\n      spanArguments,\n      forceTransaction,\n      scope\n    });\n  });\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n */\nconst continueTrace = (options, callback) => {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  if (acs.continueTrace) {\n    return acs.continueTrace(options, callback);\n  }\n  const {\n    sentryTrace,\n    baggage\n  } = options;\n  return withScope(scope => {\n    const propagationContext = propagationContextFromHeaders(sentryTrace, baggage);\n    scope.setPropagationContext(propagationContext);\n    return callback();\n  });\n};\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will not be attached to a parent span.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nfunction withActiveSpan(span, callback) {\n  const acs = getAcs();\n  if (acs.withActiveSpan) {\n    return acs.withActiveSpan(span, callback);\n  }\n  return withScope(scope => {\n    _setSpanForScope(scope, span || undefined);\n    return callback(scope);\n  });\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nfunction suppressTracing(callback) {\n  const acs = getAcs();\n  if (acs.suppressTracing) {\n    return acs.suppressTracing(callback);\n  }\n  return withScope(scope => {\n    scope.setSDKProcessingMetadata({\n      [SUPPRESS_TRACING_KEY]: true\n    });\n    return callback();\n  });\n}\n\n/**\n * Starts a new trace for the duration of the provided callback. Spans started within the\n * callback will be part of the new trace instead of a potentially previously started trace.\n *\n * Important: Only use this function if you want to override the default trace lifetime and\n * propagation mechanism of the SDK for the duration and scope of the provided callback.\n * The newly created trace will also be the root of a new distributed trace, for example if\n * you make http requests within the callback.\n * This function might be useful if the operation you want to instrument should not be part\n * of a potentially ongoing trace.\n *\n * Default behavior:\n * - Server-side: A new trace is started for each incoming request.\n * - Browser: A new trace is started for each page our route. Navigating to a new route\n *            or page will automatically create a new trace.\n */\nfunction startNewTrace(callback) {\n  return withScope(scope => {\n    scope.setPropagationContext({\n      traceId: generateTraceId(),\n      sampleRand: Math.random()\n    });\n    DEBUG_BUILD && logger.info(`Starting a new trace with id ${scope.getPropagationContext().traceId}`);\n    return withActiveSpan(null, callback);\n  });\n}\nfunction createChildOrRootSpan({\n  parentSpan,\n  spanArguments,\n  forceTransaction,\n  scope\n}) {\n  if (!hasSpansEnabled()) {\n    const span = new SentryNonRecordingSpan();\n\n    // If this is a root span, we ensure to freeze a DSC\n    // So we can have at least partial data here\n    if (forceTransaction || !parentSpan) {\n      const dsc = {\n        sampled: 'false',\n        sample_rate: '0',\n        transaction: spanArguments.name,\n        ...getDynamicSamplingContextFromSpan(span)\n      };\n      freezeDscOnSpan(span, dsc);\n    }\n    return span;\n  }\n  const isolationScope = getIsolationScope();\n  let span;\n  if (parentSpan && !forceTransaction) {\n    span = _startChildSpan(parentSpan, scope, spanArguments);\n    addChildSpanToSpan(parentSpan, span);\n  } else if (parentSpan) {\n    // If we forced a transaction but have a parent span, make sure to continue from the parent span, not the scope\n    const dsc = getDynamicSamplingContextFromSpan(parentSpan);\n    const {\n      traceId,\n      spanId: parentSpanId\n    } = parentSpan.spanContext();\n    const parentSampled = spanIsSampled(parentSpan);\n    span = _startRootSpan({\n      traceId,\n      parentSpanId,\n      ...spanArguments\n    }, scope, parentSampled);\n    freezeDscOnSpan(span, dsc);\n  } else {\n    const {\n      traceId,\n      dsc,\n      parentSpanId,\n      sampled: parentSampled\n    } = {\n      ...isolationScope.getPropagationContext(),\n      ...scope.getPropagationContext()\n    };\n    span = _startRootSpan({\n      traceId,\n      parentSpanId,\n      ...spanArguments\n    }, scope, parentSampled);\n    if (dsc) {\n      freezeDscOnSpan(span, dsc);\n    }\n  }\n  logSpanStart(span);\n  setCapturedScopesOnSpan(span, scope, isolationScope);\n  return span;\n}\n\n/**\n * This converts StartSpanOptions to SentrySpanArguments.\n * For the most part (for now) we accept the same options,\n * but some of them need to be transformed.\n */\nfunction parseSentrySpanArguments(options) {\n  const exp = options.experimental || {};\n  const initialCtx = {\n    isStandalone: exp.standalone,\n    ...options\n  };\n  if (options.startTime) {\n    const ctx = {\n      ...initialCtx\n    };\n    ctx.startTimestamp = spanTimeInputToSeconds(options.startTime);\n    delete ctx.startTime;\n    return ctx;\n  }\n  return initialCtx;\n}\nfunction getAcs() {\n  const carrier = getMainCarrier();\n  return getAsyncContextStrategy(carrier);\n}\nfunction _startRootSpan(spanArguments, scope, parentSampled) {\n  const client = getClient();\n  const options = client?.getOptions() || {};\n  const {\n    name = '',\n    attributes\n  } = spanArguments;\n  const currentPropagationContext = scope.getPropagationContext();\n  const [sampled, sampleRate, localSampleRateWasApplied] = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY] ? [false] : sampleSpan(options, {\n    name,\n    parentSampled,\n    attributes,\n    parentSampleRate: parseSampleRate(currentPropagationContext.dsc?.sample_rate)\n  }, currentPropagationContext.sampleRand);\n  const rootSpan = new SentrySpan({\n    ...spanArguments,\n    attributes: {\n      [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n      [SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: sampleRate !== undefined && localSampleRateWasApplied ? sampleRate : undefined,\n      ...spanArguments.attributes\n    },\n    sampled\n  });\n  if (!sampled && client) {\n    DEBUG_BUILD && logger.log('[Tracing] Discarding root span because its trace was not chosen to be sampled.');\n    client.recordDroppedEvent('sample_rate', 'transaction');\n  }\n  if (client) {\n    client.emit('spanStart', rootSpan);\n  }\n  return rootSpan;\n}\n\n/**\n * Creates a new `Span` while setting the current `Span.id` as `parentSpanId`.\n * This inherits the sampling decision from the parent span.\n */\nfunction _startChildSpan(parentSpan, scope, spanArguments) {\n  const {\n    spanId,\n    traceId\n  } = parentSpan.spanContext();\n  const sampled = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY] ? false : spanIsSampled(parentSpan);\n  const childSpan = sampled ? new SentrySpan({\n    ...spanArguments,\n    parentSpanId: spanId,\n    traceId,\n    sampled\n  }) : new SentryNonRecordingSpan({\n    traceId\n  });\n  addChildSpanToSpan(parentSpan, childSpan);\n  const client = getClient();\n  if (client) {\n    client.emit('spanStart', childSpan);\n    // If it has an endTimestamp, it's already ended\n    if (spanArguments.endTimestamp) {\n      client.emit('spanEnd', childSpan);\n    }\n  }\n  return childSpan;\n}\nfunction getParentSpan(scope) {\n  const span = _getSpanForScope(scope);\n  if (!span) {\n    return undefined;\n  }\n  const client = getClient();\n  const options = client ? client.getOptions() : {};\n  if (options.parentSpanIsAlwaysRootSpan) {\n    return getRootSpan(span);\n  }\n  return span;\n}\nfunction getActiveSpanWrapper(parentSpan) {\n  return parentSpan !== undefined ? callback => {\n    return withActiveSpan(parentSpan, callback);\n  } : callback => callback();\n}\nexport { continueTrace, startInactiveSpan, startNewTrace, startSpan, startSpanManual, suppressTracing, withActiveSpan };","map":{"version":3,"names":["SUPPRESS_TRACING_KEY","startSpan","options","callback","acs","getAcs","spanArguments","parseSentrySpanArguments","forceTransaction","parentSpan","customParentSpan","scope","customScope","customForkedScope","clone","withScope","wrapper","getActiveSpanWrapper","getCurrentScope","getParentSpan","shouldSkipSpan","onlyIfParent","activeSpan","SentryNonRecordingSpan","createChildOrRootSpan","_setSpanForScope","handleCallbackErrors","status","spanToJSON","isRecording","setStatus","code","SPAN_STATUS_ERROR","message","end","startSpanManual","startInactiveSpan","undefined","withActiveSpan","continueTrace","carrier","getMainCarrier","getAsyncContextStrategy","sentryTrace","baggage","propagationContext","propagationContextFromHeaders","setPropagationContext","span","suppressTracing","setSDKProcessingMetadata","startNewTrace","traceId","generateTraceId","sampleRand","Math","random","DEBUG_BUILD","logger","info","getPropagationContext","hasSpansEnabled","dsc","sampled","sample_rate","transaction","name","getDynamicSamplingContextFromSpan","freezeDscOnSpan","isolationScope","getIsolationScope","_startChildSpan","addChildSpanToSpan","spanId","parentSpanId","spanContext","parentSampled","spanIsSampled","_startRootSpan","logSpanStart","setCapturedScopesOnSpan","exp","experimental","initialCtx","isStandalone","standalone","startTime","ctx","startTimestamp","spanTimeInputToSeconds","client","getClient","getOptions","attributes","currentPropagationContext","sampleRate","localSampleRateWasApplied","getScopeData","sdkProcessingMetadata","sampleSpan","parentSampleRate","parseSampleRate","rootSpan","SentrySpan","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE","log","recordDroppedEvent","emit","childSpan","endTimestamp","_getSpanForScope","parentSpanIsAlwaysRootSpan","getRootSpan"],"sources":["C:\\Users\\chitt\\OneDrive\\Documents\\Projects\\fresh-bulk\\frontend\\node_modules\\@sentry\\core\\src\\tracing\\trace.ts"],"sourcesContent":["/* eslint-disable max-lines */\n\nimport type { AsyncContextStrategy } from '../asyncContext/types';\nimport { getMainCarrier } from '../carrier';\nimport type {\n  ClientOptions,\n  DynamicSamplingContext,\n  SentrySpanArguments,\n  Span,\n  SpanTimeInput,\n  StartSpanOptions,\n} from '../types-hoist';\n\nimport { getClient, getCurrentScope, getIsolationScope, withScope } from '../currentScopes';\n\nimport { getAsyncContextStrategy } from '../asyncContext';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { Scope } from '../scope';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE } from '../semanticAttributes';\nimport { logger } from '../utils-hoist/logger';\nimport { generateTraceId } from '../utils-hoist/propagationContext';\nimport { propagationContextFromHeaders } from '../utils-hoist/tracing';\nimport { handleCallbackErrors } from '../utils/handleCallbackErrors';\nimport { hasSpansEnabled } from '../utils/hasSpansEnabled';\nimport { parseSampleRate } from '../utils/parseSampleRate';\nimport { _getSpanForScope, _setSpanForScope } from '../utils/spanOnScope';\nimport { addChildSpanToSpan, getRootSpan, spanIsSampled, spanTimeInputToSeconds, spanToJSON } from '../utils/spanUtils';\nimport { freezeDscOnSpan, getDynamicSamplingContextFromSpan } from './dynamicSamplingContext';\nimport { logSpanStart } from './logSpans';\nimport { sampleSpan } from './sampling';\nimport { SentryNonRecordingSpan } from './sentryNonRecordingSpan';\nimport { SentrySpan } from './sentrySpan';\nimport { SPAN_STATUS_ERROR } from './spanstatus';\nimport { setCapturedScopesOnSpan } from './utils';\n\nconst SUPPRESS_TRACING_KEY = '__SENTRY_SUPPRESS_TRACING__';\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nexport function startSpan<T>(options: StartSpanOptions, callback: (span: Span) => T): T {\n  const acs = getAcs();\n  if (acs.startSpan) {\n    return acs.startSpan(options, callback);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan, scope: customScope } = options;\n\n  // We still need to fork a potentially passed scope, as we set the active span on it\n  // and we need to ensure that it is cleaned up properly once the span ends.\n  const customForkedScope = customScope?.clone();\n\n  return withScope(customForkedScope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper<T>(customParentSpan);\n\n    return wrapper(() => {\n      const scope = getCurrentScope();\n      const parentSpan = getParentSpan(scope);\n\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? new SentryNonRecordingSpan()\n        : createChildOrRootSpan({\n            parentSpan,\n            spanArguments,\n            forceTransaction,\n            scope,\n          });\n\n      _setSpanForScope(scope, activeSpan);\n\n      return handleCallbackErrors(\n        () => callback(activeSpan),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const { status } = spanToJSON(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n          }\n        },\n        () => {\n          activeSpan.end();\n        },\n      );\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span\n * after the function is done automatically. Use `span.end()` to end the span.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nexport function startSpanManual<T>(options: StartSpanOptions, callback: (span: Span, finish: () => void) => T): T {\n  const acs = getAcs();\n  if (acs.startSpanManual) {\n    return acs.startSpanManual(options, callback);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan, scope: customScope } = options;\n\n  const customForkedScope = customScope?.clone();\n\n  return withScope(customForkedScope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper<T>(customParentSpan);\n\n    return wrapper(() => {\n      const scope = getCurrentScope();\n      const parentSpan = getParentSpan(scope);\n\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? new SentryNonRecordingSpan()\n        : createChildOrRootSpan({\n            parentSpan,\n            spanArguments,\n            forceTransaction,\n            scope,\n          });\n\n      _setSpanForScope(scope, activeSpan);\n\n      return handleCallbackErrors(\n        // We pass the `finish` function to the callback, so the user can finish the span manually\n        // this is mainly here for historic purposes because previously, we instructed users to call\n        // `finish` instead of `span.end()` to also clean up the scope. Nowadays, calling `span.end()`\n        // or `finish` has the same effect and we simply leave it here to avoid breaking user code.\n        () => callback(activeSpan, () => activeSpan.end()),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const { status } = spanToJSON(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n          }\n        },\n      );\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nexport function startInactiveSpan(options: StartSpanOptions): Span {\n  const acs = getAcs();\n  if (acs.startInactiveSpan) {\n    return acs.startInactiveSpan(options);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan } = options;\n\n  // If `options.scope` is defined, we use this as as a wrapper,\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = options.scope\n    ? (callback: () => Span) => withScope(options.scope, callback)\n    : customParentSpan !== undefined\n      ? (callback: () => Span) => withActiveSpan(customParentSpan, callback)\n      : (callback: () => Span) => callback();\n\n  return wrapper(() => {\n    const scope = getCurrentScope();\n    const parentSpan = getParentSpan(scope);\n\n    const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n\n    if (shouldSkipSpan) {\n      return new SentryNonRecordingSpan();\n    }\n\n    return createChildOrRootSpan({\n      parentSpan,\n      spanArguments,\n      forceTransaction,\n      scope,\n    });\n  });\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n */\nexport const continueTrace = <V>(\n  options: {\n    sentryTrace: Parameters<typeof propagationContextFromHeaders>[0];\n    baggage: Parameters<typeof propagationContextFromHeaders>[1];\n  },\n  callback: () => V,\n): V => {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  if (acs.continueTrace) {\n    return acs.continueTrace(options, callback);\n  }\n\n  const { sentryTrace, baggage } = options;\n\n  return withScope(scope => {\n    const propagationContext = propagationContextFromHeaders(sentryTrace, baggage);\n    scope.setPropagationContext(propagationContext);\n    return callback();\n  });\n};\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will not be attached to a parent span.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nexport function withActiveSpan<T>(span: Span | null, callback: (scope: Scope) => T): T {\n  const acs = getAcs();\n  if (acs.withActiveSpan) {\n    return acs.withActiveSpan(span, callback);\n  }\n\n  return withScope(scope => {\n    _setSpanForScope(scope, span || undefined);\n    return callback(scope);\n  });\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nexport function suppressTracing<T>(callback: () => T): T {\n  const acs = getAcs();\n\n  if (acs.suppressTracing) {\n    return acs.suppressTracing(callback);\n  }\n\n  return withScope(scope => {\n    scope.setSDKProcessingMetadata({ [SUPPRESS_TRACING_KEY]: true });\n    return callback();\n  });\n}\n\n/**\n * Starts a new trace for the duration of the provided callback. Spans started within the\n * callback will be part of the new trace instead of a potentially previously started trace.\n *\n * Important: Only use this function if you want to override the default trace lifetime and\n * propagation mechanism of the SDK for the duration and scope of the provided callback.\n * The newly created trace will also be the root of a new distributed trace, for example if\n * you make http requests within the callback.\n * This function might be useful if the operation you want to instrument should not be part\n * of a potentially ongoing trace.\n *\n * Default behavior:\n * - Server-side: A new trace is started for each incoming request.\n * - Browser: A new trace is started for each page our route. Navigating to a new route\n *            or page will automatically create a new trace.\n */\nexport function startNewTrace<T>(callback: () => T): T {\n  return withScope(scope => {\n    scope.setPropagationContext({\n      traceId: generateTraceId(),\n      sampleRand: Math.random(),\n    });\n    DEBUG_BUILD && logger.info(`Starting a new trace with id ${scope.getPropagationContext().traceId}`);\n    return withActiveSpan(null, callback);\n  });\n}\n\nfunction createChildOrRootSpan({\n  parentSpan,\n  spanArguments,\n  forceTransaction,\n  scope,\n}: {\n  parentSpan: SentrySpan | undefined;\n  spanArguments: SentrySpanArguments;\n  forceTransaction?: boolean;\n  scope: Scope;\n}): Span {\n  if (!hasSpansEnabled()) {\n    const span = new SentryNonRecordingSpan();\n\n    // If this is a root span, we ensure to freeze a DSC\n    // So we can have at least partial data here\n    if (forceTransaction || !parentSpan) {\n      const dsc = {\n        sampled: 'false',\n        sample_rate: '0',\n        transaction: spanArguments.name,\n        ...getDynamicSamplingContextFromSpan(span),\n      } satisfies Partial<DynamicSamplingContext>;\n      freezeDscOnSpan(span, dsc);\n    }\n\n    return span;\n  }\n\n  const isolationScope = getIsolationScope();\n\n  let span: Span;\n  if (parentSpan && !forceTransaction) {\n    span = _startChildSpan(parentSpan, scope, spanArguments);\n    addChildSpanToSpan(parentSpan, span);\n  } else if (parentSpan) {\n    // If we forced a transaction but have a parent span, make sure to continue from the parent span, not the scope\n    const dsc = getDynamicSamplingContextFromSpan(parentSpan);\n    const { traceId, spanId: parentSpanId } = parentSpan.spanContext();\n    const parentSampled = spanIsSampled(parentSpan);\n\n    span = _startRootSpan(\n      {\n        traceId,\n        parentSpanId,\n        ...spanArguments,\n      },\n      scope,\n      parentSampled,\n    );\n\n    freezeDscOnSpan(span, dsc);\n  } else {\n    const {\n      traceId,\n      dsc,\n      parentSpanId,\n      sampled: parentSampled,\n    } = {\n      ...isolationScope.getPropagationContext(),\n      ...scope.getPropagationContext(),\n    };\n\n    span = _startRootSpan(\n      {\n        traceId,\n        parentSpanId,\n        ...spanArguments,\n      },\n      scope,\n      parentSampled,\n    );\n\n    if (dsc) {\n      freezeDscOnSpan(span, dsc);\n    }\n  }\n\n  logSpanStart(span);\n\n  setCapturedScopesOnSpan(span, scope, isolationScope);\n\n  return span;\n}\n\n/**\n * This converts StartSpanOptions to SentrySpanArguments.\n * For the most part (for now) we accept the same options,\n * but some of them need to be transformed.\n */\nfunction parseSentrySpanArguments(options: StartSpanOptions): SentrySpanArguments {\n  const exp = options.experimental || {};\n  const initialCtx: SentrySpanArguments = {\n    isStandalone: exp.standalone,\n    ...options,\n  };\n\n  if (options.startTime) {\n    const ctx: SentrySpanArguments & { startTime?: SpanTimeInput } = { ...initialCtx };\n    ctx.startTimestamp = spanTimeInputToSeconds(options.startTime);\n    delete ctx.startTime;\n    return ctx;\n  }\n\n  return initialCtx;\n}\n\nfunction getAcs(): AsyncContextStrategy {\n  const carrier = getMainCarrier();\n  return getAsyncContextStrategy(carrier);\n}\n\nfunction _startRootSpan(spanArguments: SentrySpanArguments, scope: Scope, parentSampled?: boolean): SentrySpan {\n  const client = getClient();\n  const options: Partial<ClientOptions> = client?.getOptions() || {};\n\n  const { name = '', attributes } = spanArguments;\n  const currentPropagationContext = scope.getPropagationContext();\n  const [sampled, sampleRate, localSampleRateWasApplied] = scope.getScopeData().sdkProcessingMetadata[\n    SUPPRESS_TRACING_KEY\n  ]\n    ? [false]\n    : sampleSpan(\n        options,\n        {\n          name,\n          parentSampled,\n          attributes,\n          parentSampleRate: parseSampleRate(currentPropagationContext.dsc?.sample_rate),\n        },\n        currentPropagationContext.sampleRand,\n      );\n\n  const rootSpan = new SentrySpan({\n    ...spanArguments,\n    attributes: {\n      [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n      [SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]:\n        sampleRate !== undefined && localSampleRateWasApplied ? sampleRate : undefined,\n      ...spanArguments.attributes,\n    },\n    sampled,\n  });\n\n  if (!sampled && client) {\n    DEBUG_BUILD && logger.log('[Tracing] Discarding root span because its trace was not chosen to be sampled.');\n    client.recordDroppedEvent('sample_rate', 'transaction');\n  }\n\n  if (client) {\n    client.emit('spanStart', rootSpan);\n  }\n\n  return rootSpan;\n}\n\n/**\n * Creates a new `Span` while setting the current `Span.id` as `parentSpanId`.\n * This inherits the sampling decision from the parent span.\n */\nfunction _startChildSpan(parentSpan: Span, scope: Scope, spanArguments: SentrySpanArguments): Span {\n  const { spanId, traceId } = parentSpan.spanContext();\n  const sampled = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY] ? false : spanIsSampled(parentSpan);\n\n  const childSpan = sampled\n    ? new SentrySpan({\n        ...spanArguments,\n        parentSpanId: spanId,\n        traceId,\n        sampled,\n      })\n    : new SentryNonRecordingSpan({ traceId });\n\n  addChildSpanToSpan(parentSpan, childSpan);\n\n  const client = getClient();\n  if (client) {\n    client.emit('spanStart', childSpan);\n    // If it has an endTimestamp, it's already ended\n    if (spanArguments.endTimestamp) {\n      client.emit('spanEnd', childSpan);\n    }\n  }\n\n  return childSpan;\n}\n\nfunction getParentSpan(scope: Scope): SentrySpan | undefined {\n  const span = _getSpanForScope(scope) as SentrySpan | undefined;\n\n  if (!span) {\n    return undefined;\n  }\n\n  const client = getClient();\n  const options: Partial<ClientOptions> = client ? client.getOptions() : {};\n  if (options.parentSpanIsAlwaysRootSpan) {\n    return getRootSpan(span) as SentrySpan;\n  }\n\n  return span;\n}\n\nfunction getActiveSpanWrapper<T>(parentSpan: Span | undefined | null): (callback: () => T) => T {\n  return parentSpan !== undefined\n    ? (callback: () => T) => {\n        return withActiveSpan(parentSpan, callback);\n      }\n    : (callback: () => T) => callback();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}