{"ast":null,"code":"import { defineIntegration } from '../integration.js';\nimport { relative, basename } from '../utils-hoist/path.js';\nimport { GLOBAL_OBJ } from '../utils-hoist/worldwide.js';\nconst INTEGRATION_NAME = 'RewriteFrames';\n\n/**\n * Rewrite event frames paths.\n */\nconst rewriteFramesIntegration = defineIntegration((options = {}) => {\n  const root = options.root;\n  const prefix = options.prefix || 'app:///';\n  const isBrowser = 'window' in GLOBAL_OBJ && !!GLOBAL_OBJ.window;\n  const iteratee = options.iteratee || generateIteratee({\n    isBrowser,\n    root,\n    prefix\n  });\n\n  /** Process an exception event. */\n  function _processExceptionsEvent(event) {\n    try {\n      return {\n        ...event,\n        exception: {\n          ...event.exception,\n          // The check for this is performed inside `process` call itself, safe to skip here\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          values: event.exception.values.map(value => ({\n            ...value,\n            ...(value.stacktrace && {\n              stacktrace: _processStacktrace(value.stacktrace)\n            })\n          }))\n        }\n      };\n    } catch (_oO) {\n      return event;\n    }\n  }\n\n  /** Process a stack trace. */\n  function _processStacktrace(stacktrace) {\n    return {\n      ...stacktrace,\n      frames: stacktrace?.frames && stacktrace.frames.map(f => iteratee(f))\n    };\n  }\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(originalEvent) {\n      let processedEvent = originalEvent;\n      if (originalEvent.exception && Array.isArray(originalEvent.exception.values)) {\n        processedEvent = _processExceptionsEvent(processedEvent);\n      }\n      return processedEvent;\n    }\n  };\n});\n\n/**\n * Exported only for tests.\n */\nfunction generateIteratee({\n  isBrowser,\n  root,\n  prefix\n}) {\n  return frame => {\n    if (!frame.filename) {\n      return frame;\n    }\n\n    // Determine if this is a Windows frame by checking for a Windows-style prefix such as `C:\\`\n    const isWindowsFrame = /^[a-zA-Z]:\\\\/.test(frame.filename) ||\n    // or the presence of a backslash without a forward slash (which are not allowed on Windows)\n    frame.filename.includes('\\\\') && !frame.filename.includes('/');\n\n    // Check if the frame filename begins with `/`\n    const startsWithSlash = /^\\//.test(frame.filename);\n    if (isBrowser) {\n      if (root) {\n        const oldFilename = frame.filename;\n        if (oldFilename.indexOf(root) === 0) {\n          frame.filename = oldFilename.replace(root, prefix);\n        }\n      }\n    } else {\n      if (isWindowsFrame || startsWithSlash) {\n        const filename = isWindowsFrame ? frame.filename.replace(/^[a-zA-Z]:/, '') // remove Windows-style prefix\n        .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n        : frame.filename;\n        const base = root ? relative(root, filename) : basename(filename);\n        frame.filename = `${prefix}${base}`;\n      }\n    }\n    return frame;\n  };\n}\nexport { generateIteratee, rewriteFramesIntegration };","map":{"version":3,"names":["INTEGRATION_NAME","rewriteFramesIntegration","defineIntegration","options","root","prefix","isBrowser","GLOBAL_OBJ","window","iteratee","generateIteratee","_processExceptionsEvent","event","exception","values","map","value","stacktrace","_processStacktrace","_oO","frames","f","name","processEvent","originalEvent","processedEvent","Array","isArray","frame","filename","isWindowsFrame","test","includes","startsWithSlash","oldFilename","indexOf","replace","base","relative","basename"],"sources":["C:\\Users\\chitt\\OneDrive\\Documents\\Projects\\fresh-bulk\\frontend\\node_modules\\@sentry\\core\\src\\integrations\\rewriteframes.ts"],"sourcesContent":["import { defineIntegration } from '../integration';\nimport type { Event, StackFrame, Stacktrace } from '../types-hoist';\nimport { basename, relative } from '../utils-hoist/path';\nimport { GLOBAL_OBJ } from '../utils-hoist/worldwide';\n\ntype StackFrameIteratee = (frame: StackFrame) => StackFrame;\n\nconst INTEGRATION_NAME = 'RewriteFrames';\n\ninterface RewriteFramesOptions {\n  /**\n   * Root path (the beginning of the path) that will be stripped from the frames' filename.\n   *\n   * This option has slightly different behaviour in the browser and on servers:\n   * - In the browser, the value you provide in `root` will be stripped from the beginning stack frames' paths (if the path started with the value).\n   * - On the server, the root value will only replace the beginning of stack frame filepaths, when the path is absolute. If no `root` value is provided and the path is absolute, the frame will be reduced to only the filename and the provided `prefix` option.\n   *\n   * Browser example:\n   * - Original frame: `'http://example.com/my/path/static/asset.js'`\n   * - `root: 'http://example.com/my/path'`\n   * - `assetPrefix: 'app://'`\n   * - Resulting frame: `'app:///static/asset.js'`\n   *\n   * Server example:\n   * - Original frame: `'/User/local/my/path/static/asset.js'`\n   * - `root: '/User/local/my/path'`\n   * - `assetPrefix: 'app://'`\n   * - Resulting frame: `'app:///static/asset.js'`\n   */\n  root?: string;\n\n  /**\n   * A custom prefix that stack frames will be prepended with.\n   *\n   * Default: `'app://'`\n   *\n   * This option has slightly different behaviour in the browser and on servers:\n   * - In the browser, the value you provide in `prefix` will prefix the resulting filename when the value you provided in `root` was applied. Effectively replacing whatever `root` matched in the beginning of the frame with `prefix`.\n   * - On the server, the prefix is applied to all stackframes with absolute paths. On Windows, the drive identifier (e.g. \"C://\") is replaced with the prefix.\n   */\n  prefix?: string;\n\n  /**\n   * Defines an iterator that is used to iterate through all of the stack frames for modification before being sent to Sentry.\n   * Setting this option will effectively disable both the `root` and the `prefix` options.\n   */\n  iteratee?: StackFrameIteratee;\n}\n\n/**\n * Rewrite event frames paths.\n */\nexport const rewriteFramesIntegration = defineIntegration((options: RewriteFramesOptions = {}) => {\n  const root = options.root;\n  const prefix = options.prefix || 'app:///';\n\n  const isBrowser = 'window' in GLOBAL_OBJ && !!GLOBAL_OBJ.window;\n\n  const iteratee: StackFrameIteratee = options.iteratee || generateIteratee({ isBrowser, root, prefix });\n\n  /** Process an exception event. */\n  function _processExceptionsEvent(event: Event): Event {\n    try {\n      return {\n        ...event,\n        exception: {\n          ...event.exception,\n          // The check for this is performed inside `process` call itself, safe to skip here\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          values: event.exception!.values!.map(value => ({\n            ...value,\n            ...(value.stacktrace && { stacktrace: _processStacktrace(value.stacktrace) }),\n          })),\n        },\n      };\n    } catch (_oO) {\n      return event;\n    }\n  }\n\n  /** Process a stack trace. */\n  function _processStacktrace(stacktrace?: Stacktrace): Stacktrace {\n    return {\n      ...stacktrace,\n      frames: stacktrace?.frames && stacktrace.frames.map(f => iteratee(f)),\n    };\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(originalEvent) {\n      let processedEvent = originalEvent;\n\n      if (originalEvent.exception && Array.isArray(originalEvent.exception.values)) {\n        processedEvent = _processExceptionsEvent(processedEvent);\n      }\n\n      return processedEvent;\n    },\n  };\n});\n\n/**\n * Exported only for tests.\n */\nexport function generateIteratee({\n  isBrowser,\n  root,\n  prefix,\n}: {\n  isBrowser: boolean;\n  root?: string;\n  prefix: string;\n}): StackFrameIteratee {\n  return (frame: StackFrame) => {\n    if (!frame.filename) {\n      return frame;\n    }\n\n    // Determine if this is a Windows frame by checking for a Windows-style prefix such as `C:\\`\n    const isWindowsFrame =\n      /^[a-zA-Z]:\\\\/.test(frame.filename) ||\n      // or the presence of a backslash without a forward slash (which are not allowed on Windows)\n      (frame.filename.includes('\\\\') && !frame.filename.includes('/'));\n\n    // Check if the frame filename begins with `/`\n    const startsWithSlash = /^\\//.test(frame.filename);\n\n    if (isBrowser) {\n      if (root) {\n        const oldFilename = frame.filename;\n        if (oldFilename.indexOf(root) === 0) {\n          frame.filename = oldFilename.replace(root, prefix);\n        }\n      }\n    } else {\n      if (isWindowsFrame || startsWithSlash) {\n        const filename = isWindowsFrame\n          ? frame.filename\n              .replace(/^[a-zA-Z]:/, '') // remove Windows-style prefix\n              .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n          : frame.filename;\n        const base = root ? relative(root, filename) : basename(filename);\n        frame.filename = `${prefix}${base}`;\n      }\n    }\n\n    return frame;\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}