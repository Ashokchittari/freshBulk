{"ast":null,"code":"import { getClient, withScope } from './currentScopes.js';\nimport { captureException } from './exports.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE } from './semanticAttributes.js';\nimport './tracing/errors.js';\nimport { addNonEnumerableProperty } from './utils-hoist/object.js';\nimport './debug-build.js';\nimport './utils-hoist/logger.js';\nimport './utils-hoist/time.js';\nimport './utils-hoist/debug-build.js';\nimport { normalize } from './utils-hoist/normalize.js';\nimport './utils-hoist/syncpromise.js';\nimport { startSpanManual } from './tracing/trace.js';\nconst trpcCaptureContext = {\n  mechanism: {\n    handled: false,\n    data: {\n      function: 'trpcMiddleware'\n    }\n  }\n};\nfunction captureIfError(nextResult) {\n  // TODO: Set span status based on what TRPCError was encountered\n  if (typeof nextResult === 'object' && nextResult !== null && 'ok' in nextResult && !nextResult.ok && 'error' in nextResult) {\n    captureException(nextResult.error, trpcCaptureContext);\n  }\n}\n\n/**\n * Sentry tRPC middleware that captures errors and creates spans for tRPC procedures.\n */\nfunction trpcMiddleware(options = {}) {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return async function (opts) {\n    const {\n      path,\n      type,\n      next,\n      rawInput,\n      getRawInput\n    } = opts;\n    const client = getClient();\n    const clientOptions = client?.getOptions();\n    const trpcContext = {\n      procedure_path: path,\n      procedure_type: type\n    };\n    addNonEnumerableProperty(trpcContext, '__sentry_override_normalization_depth__', 1 + (\n    // 1 for context.input + the normal normalization depth\n    clientOptions?.normalizeDepth ?? 5) // 5 is a sane depth\n    );\n    if (options.attachRpcInput !== undefined ? options.attachRpcInput : clientOptions?.sendDefaultPii) {\n      if (rawInput !== undefined) {\n        trpcContext.input = normalize(rawInput);\n      }\n      if (getRawInput !== undefined && typeof getRawInput === 'function') {\n        try {\n          const rawRes = await getRawInput();\n          trpcContext.input = normalize(rawRes);\n        } catch (err) {\n          // noop\n        }\n      }\n    }\n    return withScope(scope => {\n      scope.setContext('trpc', trpcContext);\n      return startSpanManual({\n        name: `trpc/${path}`,\n        op: 'rpc.server',\n        attributes: {\n          [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n          [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.rpc.trpc'\n        },\n        forceTransaction: !!options.forceTransaction\n      }, async span => {\n        try {\n          const nextResult = await next();\n          captureIfError(nextResult);\n          span.end();\n          return nextResult;\n        } catch (e) {\n          captureException(e, trpcCaptureContext);\n          span.end();\n          throw e;\n        }\n      });\n    });\n  };\n}\nexport { trpcMiddleware };","map":{"version":3,"names":["trpcCaptureContext","mechanism","handled","data","function","captureIfError","nextResult","ok","captureException","error","trpcMiddleware","options","opts","path","type","next","rawInput","getRawInput","client","getClient","clientOptions","getOptions","trpcContext","procedure_path","procedure_type","addNonEnumerableProperty","normalizeDepth","attachRpcInput","undefined","sendDefaultPii","input","normalize","rawRes","err","withScope","scope","setContext","startSpanManual","name","op","attributes","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","forceTransaction","span","end","e"],"sources":["C:\\Users\\chitt\\OneDrive\\Documents\\Projects\\fresh-bulk\\frontend\\node_modules\\@sentry\\core\\src\\trpc.ts"],"sourcesContent":["import { getClient, withScope } from './currentScopes';\nimport { captureException } from './exports';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE } from './semanticAttributes';\nimport { startSpanManual } from './tracing';\nimport { addNonEnumerableProperty } from './utils-hoist';\nimport { normalize } from './utils-hoist/normalize';\n\ninterface SentryTrpcMiddlewareOptions {\n  /** Whether to include procedure inputs in reported events. Defaults to `false`. */\n  attachRpcInput?: boolean;\n  forceTransaction?: boolean;\n}\n\nexport interface SentryTrpcMiddlewareArguments<T> {\n  path?: unknown;\n  type?: unknown;\n  next: () => T;\n  rawInput?: unknown;\n  getRawInput?: () => Promise<unknown>;\n}\n\nconst trpcCaptureContext = { mechanism: { handled: false, data: { function: 'trpcMiddleware' } } };\n\nfunction captureIfError(nextResult: unknown): void {\n  // TODO: Set span status based on what TRPCError was encountered\n  if (\n    typeof nextResult === 'object' &&\n    nextResult !== null &&\n    'ok' in nextResult &&\n    !nextResult.ok &&\n    'error' in nextResult\n  ) {\n    captureException(nextResult.error, trpcCaptureContext);\n  }\n}\n\ntype SentryTrpcMiddleware<T> = T extends Promise<unknown> ? T : Promise<T>;\n\n/**\n * Sentry tRPC middleware that captures errors and creates spans for tRPC procedures.\n */\nexport function trpcMiddleware(options: SentryTrpcMiddlewareOptions = {}) {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return async function <T>(opts: SentryTrpcMiddlewareArguments<T>): SentryTrpcMiddleware<T> {\n    const { path, type, next, rawInput, getRawInput } = opts;\n\n    const client = getClient();\n    const clientOptions = client?.getOptions();\n\n    const trpcContext: Record<string, unknown> = {\n      procedure_path: path,\n      procedure_type: type,\n    };\n\n    addNonEnumerableProperty(\n      trpcContext,\n      '__sentry_override_normalization_depth__',\n      1 + // 1 for context.input + the normal normalization depth\n        (clientOptions?.normalizeDepth ?? 5), // 5 is a sane depth\n    );\n\n    if (options.attachRpcInput !== undefined ? options.attachRpcInput : clientOptions?.sendDefaultPii) {\n      if (rawInput !== undefined) {\n        trpcContext.input = normalize(rawInput);\n      }\n\n      if (getRawInput !== undefined && typeof getRawInput === 'function') {\n        try {\n          const rawRes = await getRawInput();\n\n          trpcContext.input = normalize(rawRes);\n        } catch (err) {\n          // noop\n        }\n      }\n    }\n\n    return withScope(scope => {\n      scope.setContext('trpc', trpcContext);\n      return startSpanManual(\n        {\n          name: `trpc/${path}`,\n          op: 'rpc.server',\n          attributes: {\n            [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n            [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.rpc.trpc',\n          },\n          forceTransaction: !!options.forceTransaction,\n        },\n        async span => {\n          try {\n            const nextResult = await next();\n            captureIfError(nextResult);\n            span.end();\n            return nextResult;\n          } catch (e) {\n            captureException(e, trpcCaptureContext);\n            span.end();\n            throw e;\n          }\n        },\n      ) as SentryTrpcMiddleware<T>;\n    });\n  };\n}\n"],"mappings":";;;;;;;;;;;;AAqBA,MAAMA,kBAAA,GAAqB;EAAEC,SAAS,EAAE;IAAEC,OAAO,EAAE,KAAK;IAAEC,IAAI,EAAE;MAAEC,QAAQ,EAAE;IAAiB;EAAA;AAAA,CAAK;AAElG,SAASC,cAAcA,CAACC,UAAU,EAAiB;EACnD;EACE,IACE,OAAOA,UAAW,KAAI,QAAS,IAC/BA,UAAA,KAAe,IAAK,IACpB,QAAQA,UAAW,IACnB,CAACA,UAAU,CAACC,EAAG,IACf,WAAWD,UAAA,EACX;IACAE,gBAAgB,CAACF,UAAU,CAACG,KAAK,EAAET,kBAAkB,CAAC;EAC1D;AACA;;AAIA;AACA;AACA;AACO,SAASU,cAAcA,CAACC,OAAO,GAAgC,EAAE,EAAE;EAC1E;EACA;EACE,OAAO,gBAAmBC,IAAI,EAA6D;IACzF,MAAM;MAAEC,IAAI;MAAEC,IAAI;MAAEC,IAAI;MAAEC,QAAQ;MAAEC;IAAY,IAAIL,IAAI;IAExD,MAAMM,MAAA,GAASC,SAAS,EAAE;IAC1B,MAAMC,aAAc,GAAEF,MAAM,EAAEG,UAAU,EAAE;IAE1C,MAAMC,WAAW,GAA4B;MAC3CC,cAAc,EAAEV,IAAI;MACpBW,cAAc,EAAEV;IACtB,CAAK;IAEDW,wBAAwB,CACtBH,WAAW,EACX,yCAAyC,EACzC,CAAE;IAAA;IACCF,aAAa,EAAEM,cAAe,IAAG,CAAC,CAAC;IAC5C,CAAK;IAED,IAAIf,OAAO,CAACgB,cAAA,KAAmBC,SAAA,GAAYjB,OAAO,CAACgB,cAAe,GAAEP,aAAa,EAAES,cAAc,EAAE;MACjG,IAAIb,QAAS,KAAIY,SAAS,EAAE;QAC1BN,WAAW,CAACQ,KAAA,GAAQC,SAAS,CAACf,QAAQ,CAAC;MAC/C;MAEM,IAAIC,WAAA,KAAgBW,SAAA,IAAa,OAAOX,WAAA,KAAgB,UAAU,EAAE;QAClE,IAAI;UACF,MAAMe,MAAO,GAAE,MAAMf,WAAW,EAAE;UAElCK,WAAW,CAACQ,KAAA,GAAQC,SAAS,CAACC,MAAM,CAAC;QAC/C,CAAU,QAAOC,GAAG,EAAE;UACtB;QAAA;MAEA;IACA;IAEI,OAAOC,SAAS,CAACC,KAAA,IAAS;MACxBA,KAAK,CAACC,UAAU,CAAC,MAAM,EAAEd,WAAW,CAAC;MACrC,OAAOe,eAAe,CACpB;QACEC,IAAI,EAAE,QAAQzB,IAAI,EAAC;QACA0B,EAAA;QACAC,UAAA;UACA,CAAAC,gCAAA;UACA,CAAAC,gCAAA;QACA;QACAC,gBAAA,IAAAhC,OAAA,CAAAgC;MACA,GACA,MAAAC,IAAA;QACA;UACA,MAAAtC,UAAA,SAAAS,IAAA;UACAV,cAAA,CAAAC,UAAA;UACAsC,IAAA,CAAAC,GAAA;UACA,OAAAvC,UAAA;QACA,SAAAwC,CAAA;UACAtC,gBAAA,CAAAsC,CAAA,EAAA9C,kBAAA;UACA4C,IAAA,CAAAC,GAAA;UACA,MAAAC,CAAA;QACA;MACA,CACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}