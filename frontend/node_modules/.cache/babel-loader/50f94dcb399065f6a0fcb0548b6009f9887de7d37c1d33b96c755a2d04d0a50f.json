{"ast":null,"code":"import { WINDOW } from '../../types.js';\nimport { bindReporter } from './lib/bindReporter.js';\nimport { getActivationStart } from './lib/getActivationStart.js';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\nimport { runOnce } from './lib/runOnce.js';\nimport { whenActivated } from './lib/whenActivated.js';\nimport { whenIdle } from './lib/whenIdle.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Thresholds for LCP. See https://web.dev/articles/lcp#what_is_a_good_lcp_score */\nconst LCPThresholds = [2500, 4000];\nconst reportedMetricIDs = {};\n\n/**\n * Calculates the [LCP](https://web.dev/articles/lcp) value for the current page and\n * calls the `callback` function once the value is ready (along with the\n * relevant `largest-contentful-paint` performance entry used to determine the\n * value). The reported value is a `DOMHighResTimeStamp`.\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called any time a new `largest-contentful-paint`\n * performance entry is dispatched, or once the final value of the metric has\n * been determined.\n */\nconst onLCP = (onReport, opts = {}) => {\n  whenActivated(() => {\n    const visibilityWatcher = getVisibilityWatcher();\n    const metric = initMetric('LCP');\n    let report;\n    const handleEntries = entries => {\n      // If reportAllChanges is set then call this function for each entry,\n      // otherwise only consider the last one.\n      if (!opts.reportAllChanges) {\n        // eslint-disable-next-line no-param-reassign\n        entries = entries.slice(-1);\n      }\n      entries.forEach(entry => {\n        // Only report if the page wasn't hidden prior to LCP.\n        if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n          // The startTime attribute returns the value of the renderTime if it is\n          // not 0, and the value of the loadTime otherwise. The activationStart\n          // reference is used because LCP should be relative to page activation\n          // rather than navigation start if the page was pre-rendered. But in cases\n          // where `activationStart` occurs after the LCP, this time should be\n          // clamped at 0.\n          metric.value = Math.max(entry.startTime - getActivationStart(), 0);\n          metric.entries = [entry];\n          report();\n        }\n      });\n    };\n    const po = observe('largest-contentful-paint', handleEntries);\n    if (po) {\n      report = bindReporter(onReport, metric, LCPThresholds, opts.reportAllChanges);\n      const stopListening = runOnce(() => {\n        if (!reportedMetricIDs[metric.id]) {\n          handleEntries(po.takeRecords());\n          po.disconnect();\n          reportedMetricIDs[metric.id] = true;\n          report(true);\n        }\n      });\n\n      // Stop listening after input. Note: while scrolling is an input that\n      // stops LCP observation, it's unreliable since it can be programmatically\n      // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n      ['keydown', 'click'].forEach(type => {\n        // Wrap in a setTimeout so the callback is run in a separate task\n        // to avoid extending the keyboard/click handler to reduce INP impact\n        // https://github.com/GoogleChrome/web-vitals/issues/383\n        if (WINDOW.document) {\n          addEventListener(type, () => whenIdle(stopListening), {\n            once: true,\n            capture: true\n          });\n        }\n      });\n      onHidden(stopListening);\n    }\n  });\n};\nexport { LCPThresholds, onLCP };","map":{"version":3,"names":["LCPThresholds","reportedMetricIDs","onLCP","onReport","opts","whenActivated","visibilityWatcher","getVisibilityWatcher","metric","initMetric","report","handleEntries","entries","reportAllChanges","slice","forEach","entry","startTime","firstHiddenTime","value","Math","max","getActivationStart","po","observe","bindReporter","stopListening","runOnce","id","takeRecords","disconnect","type","WINDOW","document","addEventListener","whenIdle","once","capture","onHidden"],"sources":["C:\\Users\\chitt\\OneDrive\\Documents\\Projects\\fresh-bulk\\frontend\\node_modules\\@sentry-internal\\browser-utils\\src\\metrics\\web-vitals\\getLCP.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\nimport { bindReporter } from './lib/bindReporter';\nimport { getActivationStart } from './lib/getActivationStart';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { runOnce } from './lib/runOnce';\nimport { whenActivated } from './lib/whenActivated';\nimport { whenIdle } from './lib/whenIdle';\nimport type { LCPMetric, MetricRatingThresholds, ReportOpts } from './types';\n\n/** Thresholds for LCP. See https://web.dev/articles/lcp#what_is_a_good_lcp_score */\nexport const LCPThresholds: MetricRatingThresholds = [2500, 4000];\n\nconst reportedMetricIDs: Record<string, boolean> = {};\n\n/**\n * Calculates the [LCP](https://web.dev/articles/lcp) value for the current page and\n * calls the `callback` function once the value is ready (along with the\n * relevant `largest-contentful-paint` performance entry used to determine the\n * value). The reported value is a `DOMHighResTimeStamp`.\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called any time a new `largest-contentful-paint`\n * performance entry is dispatched, or once the final value of the metric has\n * been determined.\n */\nexport const onLCP = (onReport: (metric: LCPMetric) => void, opts: ReportOpts = {}) => {\n  whenActivated(() => {\n    const visibilityWatcher = getVisibilityWatcher();\n    const metric = initMetric('LCP');\n    let report: ReturnType<typeof bindReporter>;\n\n    const handleEntries = (entries: LCPMetric['entries']) => {\n      // If reportAllChanges is set then call this function for each entry,\n      // otherwise only consider the last one.\n      if (!opts.reportAllChanges) {\n        // eslint-disable-next-line no-param-reassign\n        entries = entries.slice(-1);\n      }\n\n      entries.forEach(entry => {\n        // Only report if the page wasn't hidden prior to LCP.\n        if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n          // The startTime attribute returns the value of the renderTime if it is\n          // not 0, and the value of the loadTime otherwise. The activationStart\n          // reference is used because LCP should be relative to page activation\n          // rather than navigation start if the page was pre-rendered. But in cases\n          // where `activationStart` occurs after the LCP, this time should be\n          // clamped at 0.\n          metric.value = Math.max(entry.startTime - getActivationStart(), 0);\n          metric.entries = [entry];\n          report();\n        }\n      });\n    };\n\n    const po = observe('largest-contentful-paint', handleEntries);\n\n    if (po) {\n      report = bindReporter(onReport, metric, LCPThresholds, opts.reportAllChanges);\n\n      const stopListening = runOnce(() => {\n        if (!reportedMetricIDs[metric.id]) {\n          handleEntries(po.takeRecords() as LCPMetric['entries']);\n          po.disconnect();\n          reportedMetricIDs[metric.id] = true;\n          report(true);\n        }\n      });\n\n      // Stop listening after input. Note: while scrolling is an input that\n      // stops LCP observation, it's unreliable since it can be programmatically\n      // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n      ['keydown', 'click'].forEach(type => {\n        // Wrap in a setTimeout so the callback is run in a separate task\n        // to avoid extending the keyboard/click handler to reduce INP impact\n        // https://github.com/GoogleChrome/web-vitals/issues/383\n        if (WINDOW.document) {\n          addEventListener(type, () => whenIdle(stopListening as () => void), {\n            once: true,\n            capture: true,\n          });\n        }\n      });\n\n      onHidden(stopListening);\n    }\n  });\n};\n"],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAcA;AACO,MAAMA,aAAa,GAA2B,CAAC,IAAI,EAAE,IAAI;AAEhE,MAAMC,iBAAiB,GAA4B,EAAE;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa,MAAAC,KAAA,GAAQA,CAACC,QAAQ,EAA+BC,IAAI,GAAe,EAAE,KAAK;EACrFC,aAAa,CAAC,MAAM;IAClB,MAAMC,iBAAA,GAAoBC,oBAAoB,EAAE;IAChD,MAAMC,MAAO,GAAEC,UAAU,CAAC,KAAK,CAAC;IAChC,IAAIC,MAAM;IAEV,MAAMC,aAAc,GAAGC,OAAO,IAA2B;MAC7D;MACA;MACM,IAAI,CAACR,IAAI,CAACS,gBAAgB,EAAE;QAClC;QACQD,OAAA,GAAUA,OAAO,CAACE,KAAK,CAAC,EAAE,CAAC;MACnC;MAEMF,OAAO,CAACG,OAAO,CAACC,KAAA,IAAS;QAC/B;QACQ,IAAIA,KAAK,CAACC,SAAA,GAAYX,iBAAiB,CAACY,eAAe,EAAE;UACjE;UACA;UACA;UACA;UACA;UACA;UACUV,MAAM,CAACW,KAAA,GAAQC,IAAI,CAACC,GAAG,CAACL,KAAK,CAACC,SAAA,GAAYK,kBAAkB,EAAE,EAAE,CAAC,CAAC;UAClEd,MAAM,CAACI,OAAA,GAAU,CAACI,KAAK,CAAC;UACxBN,MAAM,EAAE;QAClB;MACA,CAAO,CAAC;IACR,CAAK;IAED,MAAMa,EAAA,GAAKC,OAAO,CAAC,0BAA0B,EAAEb,aAAa,CAAC;IAE7D,IAAIY,EAAE,EAAE;MACNb,MAAO,GAAEe,YAAY,CAACtB,QAAQ,EAAEK,MAAM,EAAER,aAAa,EAAEI,IAAI,CAACS,gBAAgB,CAAC;MAE7E,MAAMa,aAAc,GAAEC,OAAO,CAAC,MAAM;QAClC,IAAI,CAAC1B,iBAAiB,CAACO,MAAM,CAACoB,EAAE,CAAC,EAAE;UACjCjB,aAAa,CAACY,EAAE,CAACM,WAAW,GAA2B;UACvDN,EAAE,CAACO,UAAU,EAAE;UACf7B,iBAAiB,CAACO,MAAM,CAACoB,EAAE,IAAI,IAAI;UACnClB,MAAM,CAAC,IAAI,CAAC;QACtB;MACA,CAAO,CAAC;;MAER;MACA;MACA;MACM,CAAC,SAAS,EAAE,OAAO,CAAC,CAACK,OAAO,CAACgB,IAAA,IAAQ;QAC3C;QACA;QACA;QACQ,IAAIC,MAAM,CAACC,QAAQ,EAAE;UACnBC,gBAAgB,CAACH,IAAI,EAAE,MAAMI,QAAQ,CAACT,aAAc,CAAc,EAAE;YAClEU,IAAI,EAAE,IAAI;YACVC,OAAO,EAAE;UACrB,CAAW,CAAC;QACZ;MACA,CAAO,CAAC;MAEFC,QAAQ,CAACZ,aAAa,CAAC;IAC7B;EACA,CAAG,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}