{"ast":null,"code":"import { getClient } from '../currentScopes.js';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { defineIntegration } from '../integration.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '../semanticAttributes.js';\nimport { GLOBAL_OBJ } from '../utils-hoist/worldwide.js';\nimport '../utils-hoist/debug-build.js';\nimport { CONSOLE_LEVELS, logger } from '../utils-hoist/logger.js';\nimport { addConsoleInstrumentationHandler } from '../utils-hoist/instrument/console.js';\nimport { safeJoin } from '../utils-hoist/string.js';\nimport '../utils-hoist/time.js';\nimport '../utils-hoist/syncpromise.js';\nimport { _INTERNAL_captureLog } from './exports.js';\nconst INTEGRATION_NAME = 'ConsoleLogs';\nconst DEFAULT_ATTRIBUTES = {\n  [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.console.logging'\n};\nconst _consoleLoggingIntegration = (options = {}) => {\n  const levels = options.levels || CONSOLE_LEVELS;\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (!client.getOptions()._experiments?.enableLogs) {\n        DEBUG_BUILD && logger.warn('`_experiments.enableLogs` is not enabled, ConsoleLogs integration disabled');\n        return;\n      }\n      addConsoleInstrumentationHandler(({\n        args,\n        level\n      }) => {\n        if (getClient() !== client || !levels.includes(level)) {\n          return;\n        }\n        if (level === 'assert') {\n          if (!args[0]) {\n            const followingArgs = args.slice(1);\n            const message = followingArgs.length > 0 ? `Assertion failed: ${formatConsoleArgs(followingArgs)}` : 'Assertion failed';\n            _INTERNAL_captureLog({\n              level: 'error',\n              message,\n              attributes: DEFAULT_ATTRIBUTES\n            });\n          }\n          return;\n        }\n        const isLevelLog = level === 'log';\n        _INTERNAL_captureLog({\n          level: isLevelLog ? 'info' : level,\n          message: formatConsoleArgs(args),\n          severityNumber: isLevelLog ? 10 : undefined,\n          attributes: DEFAULT_ATTRIBUTES\n        });\n      });\n    }\n  };\n};\n\n/**\n * Captures calls to the `console` API as logs in Sentry. Requires `_experiments.enableLogs` to be enabled.\n *\n * @experimental This feature is experimental and may be changed or removed in future versions.\n *\n * By default the integration instruments `console.debug`, `console.info`, `console.warn`, `console.error`,\n * `console.log`, `console.trace`, and `console.assert`. You can use the `levels` option to customize which\n * levels are captured.\n *\n * @example\n *\n * ```ts\n * import * as Sentry from '@sentry/browser';\n *\n * Sentry.init({\n *   integrations: [Sentry.consoleLoggingIntegration({ levels: ['error', 'warn'] })],\n * });\n * ```\n */\nconst consoleLoggingIntegration = defineIntegration(_consoleLoggingIntegration);\nfunction formatConsoleArgs(values) {\n  return 'util' in GLOBAL_OBJ && typeof GLOBAL_OBJ.util.format === 'function' ? GLOBAL_OBJ.util.format(...values) : safeJoin(values, ' ');\n}\nexport { consoleLoggingIntegration };","map":{"version":3,"names":["INTEGRATION_NAME","DEFAULT_ATTRIBUTES","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","_consoleLoggingIntegration","options","levels","CONSOLE_LEVELS","name","setup","client","getOptions","_experiments","enableLogs","DEBUG_BUILD","logger","warn","addConsoleInstrumentationHandler","args","level","getClient","includes","followingArgs","slice","message","length","formatConsoleArgs","_INTERNAL_captureLog","attributes","isLevelLog","severityNumber","undefined","consoleLoggingIntegration","defineIntegration","values","GLOBAL_OBJ","util","format","safeJoin"],"sources":["C:\\Users\\chitt\\OneDrive\\Documents\\Projects\\fresh-bulk\\frontend\\node_modules\\@sentry\\core\\src\\logs\\console-integration.ts"],"sourcesContent":["import { getClient } from '../currentScopes';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { defineIntegration } from '../integration';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '../semanticAttributes';\nimport type { ConsoleLevel, IntegrationFn } from '../types-hoist';\nimport { CONSOLE_LEVELS, GLOBAL_OBJ, addConsoleInstrumentationHandler, logger, safeJoin } from '../utils-hoist';\nimport { _INTERNAL_captureLog } from './exports';\n\ninterface CaptureConsoleOptions {\n  levels: ConsoleLevel[];\n}\n\ntype GlobalObjectWithUtil = typeof GLOBAL_OBJ & {\n  util: {\n    format: (...args: unknown[]) => string;\n  };\n};\n\nconst INTEGRATION_NAME = 'ConsoleLogs';\n\nconst DEFAULT_ATTRIBUTES = {\n  [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.console.logging',\n};\n\nconst _consoleLoggingIntegration = ((options: Partial<CaptureConsoleOptions> = {}) => {\n  const levels = options.levels || CONSOLE_LEVELS;\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (!client.getOptions()._experiments?.enableLogs) {\n        DEBUG_BUILD && logger.warn('`_experiments.enableLogs` is not enabled, ConsoleLogs integration disabled');\n        return;\n      }\n\n      addConsoleInstrumentationHandler(({ args, level }) => {\n        if (getClient() !== client || !levels.includes(level)) {\n          return;\n        }\n\n        if (level === 'assert') {\n          if (!args[0]) {\n            const followingArgs = args.slice(1);\n            const message =\n              followingArgs.length > 0 ? `Assertion failed: ${formatConsoleArgs(followingArgs)}` : 'Assertion failed';\n            _INTERNAL_captureLog({ level: 'error', message, attributes: DEFAULT_ATTRIBUTES });\n          }\n          return;\n        }\n\n        const isLevelLog = level === 'log';\n        _INTERNAL_captureLog({\n          level: isLevelLog ? 'info' : level,\n          message: formatConsoleArgs(args),\n          severityNumber: isLevelLog ? 10 : undefined,\n          attributes: DEFAULT_ATTRIBUTES,\n        });\n      });\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Captures calls to the `console` API as logs in Sentry. Requires `_experiments.enableLogs` to be enabled.\n *\n * @experimental This feature is experimental and may be changed or removed in future versions.\n *\n * By default the integration instruments `console.debug`, `console.info`, `console.warn`, `console.error`,\n * `console.log`, `console.trace`, and `console.assert`. You can use the `levels` option to customize which\n * levels are captured.\n *\n * @example\n *\n * ```ts\n * import * as Sentry from '@sentry/browser';\n *\n * Sentry.init({\n *   integrations: [Sentry.consoleLoggingIntegration({ levels: ['error', 'warn'] })],\n * });\n * ```\n */\nexport const consoleLoggingIntegration = defineIntegration(_consoleLoggingIntegration);\n\nfunction formatConsoleArgs(values: unknown[]): string {\n  return 'util' in GLOBAL_OBJ && typeof (GLOBAL_OBJ as GlobalObjectWithUtil).util.format === 'function'\n    ? (GLOBAL_OBJ as GlobalObjectWithUtil).util.format(...values)\n    : safeJoin(values, ' ');\n}\n"],"mappings":";;;;;;;;;;;;AAkBA,MAAMA,gBAAA,GAAmB,aAAa;AAEtC,MAAMC,kBAAA,GAAqB;EACzB,CAACC,gCAAgC,GAAG;AACtC,CAAC;AAED,MAAMC,0BAAA,GAA8BA,CAACC,OAAO,GAAmC,EAAE,KAAK;EACpF,MAAMC,MAAO,GAAED,OAAO,CAACC,MAAA,IAAUC,cAAc;EAE/C,OAAO;IACLC,IAAI,EAAEP,gBAAgB;IACtBQ,KAAKA,CAACC,MAAM,EAAE;MACZ,IAAI,CAACA,MAAM,CAACC,UAAU,EAAE,CAACC,YAAY,EAAEC,UAAU,EAAE;QACjDC,WAAA,IAAeC,MAAM,CAACC,IAAI,CAAC,4EAA4E,CAAC;QACxG;MACR;MAEMC,gCAAgC,CAAC,CAAC;QAAEC,IAAI;QAAEC;MAAA,CAAO,KAAK;QACpD,IAAIC,SAAS,OAAOV,MAAA,IAAU,CAACJ,MAAM,CAACe,QAAQ,CAACF,KAAK,CAAC,EAAE;UACrD;QACV;QAEQ,IAAIA,KAAM,KAAI,QAAQ,EAAE;UACtB,IAAI,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE;YACZ,MAAMI,aAAA,GAAgBJ,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC;YACnC,MAAMC,OAAQ,GACZF,aAAa,CAACG,MAAO,GAAE,IAAI,qBAAqBC,iBAAiB,CAACJ,aAAa,CAAC,EAAC;YACAK,oBAAA;cAAAR,KAAA;cAAAK,OAAA;cAAAI,UAAA,EAAA1B;YAAA;UACA;UACA;QACA;QAEA,MAAA2B,UAAA,GAAAV,KAAA;QACAQ,oBAAA;UACAR,KAAA,EAAAU,UAAA,YAAAV,KAAA;UACAK,OAAA,EAAAE,iBAAA,CAAAR,IAAA;UACAY,cAAA,EAAAD,UAAA,QAAAE,SAAA;UACAH,UAAA,EAAA1B;QACA;MACA;IACA;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA8B,yBAAA,GAAAC,iBAAA,CAAA7B,0BAAA;AAEA,SAAAsB,kBAAAQ,MAAA;EACA,iBAAAC,UAAA,WAAAA,UAAA,CAAAC,IAAA,CAAAC,MAAA,kBACAF,UAAA,CAAAC,IAAA,CAAAC,MAAA,IAAAH,MAAA,IACAI,QAAA,CAAAJ,MAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}